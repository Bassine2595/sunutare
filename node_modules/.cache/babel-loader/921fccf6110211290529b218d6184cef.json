{"ast":null,"code":"import \"antd/es/card/style\";\nimport _Card from \"antd/es/card\";\nimport \"antd/es/space/style\";\nimport _Space from \"antd/es/space\";\nimport \"antd/es/tag/style\";\nimport _Tag from \"antd/es/tag\";\nimport \"antd/es/divider/style\";\nimport _Divider from \"antd/es/divider\";\nimport \"antd/es/notification/style\";\nimport _notification from \"antd/es/notification\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nvar _jsxFileName = \"/home/bassine/Documents/ProjetSunutare/frontend-manager/src/component/Order/Reminder.tsx\";\nimport React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { MESSAGEBYSUBJECT } from \"../../Gql/Query\";\nimport { ButtonSend } from \"../Shared/Button\";\nimport { ADDALERT } from \"../../Gql/Mutation\";\nconst {\n  TextArea\n} = _Input;\nexport const Reminder = ({\n  id\n}) => {\n  const [key, setKey] = useState(0);\n  const [current, setCurrent] = useState(null);\n  const [addNotification, options] = useMutation(ADDALERT);\n  const {\n    data,\n    loading\n  } = useQuery(MESSAGEBYSUBJECT, {\n    variables: {\n      subject: \"Relance\"\n    }\n  });\n\n  const onChange = ({\n    target: {\n      value\n    }\n  }) => {\n    setCurrent({\n      messageId: null,\n      message: value\n    });\n  };\n\n  const onFinish = () => {\n    if (!(current === null || current === void 0 ? void 0 : current.message)) {\n      _notification.info({\n        message: \"Le message est obligatoire !\"\n      });\n    } else {\n      addNotification({\n        variables: {\n          input: { ...current,\n            serviceId: id,\n            typeNotification: \"RAPPELLE\"\n          }\n        }\n      }).then(() => {\n        _notification.success({\n          message: \"Votre relance a été pris en compte !\"\n        });\n\n        setKey(key => key + 1);\n      }).catch(error => {\n        console.log(error);\n\n        _notification.error({\n          message: \"Une erreur est survenue. Veillez réessayer plus tard !\"\n        });\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(_Card, {\n    loading: loading,\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    rows: 1,\n    value: current === null || current === void 0 ? void 0 : current.message,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(_Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(_Space, {\n    direction: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, data === null || data === void 0 ? void 0 : data.messages.nodes.map(({\n    id,\n    message\n  }) => /*#__PURE__*/React.createElement(_Tag, {\n    key: id,\n    color: \"#1DA57A\",\n    style: {\n      cursor: \"pointer\",\n      width: \"100%\",\n      borderRadius: 5\n    },\n    onClick: () => setCurrent({\n      messageId: id,\n      message\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, message))), /*#__PURE__*/React.createElement(_Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ButtonSend, {\n    type: \"primary\",\n    onClick: onFinish,\n    loading: options.loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/home/bassine/Documents/ProjetSunutare/frontend-manager/src/component/Order/Reminder.tsx"],"names":["React","useState","useQuery","useMutation","MESSAGEBYSUBJECT","ButtonSend","ADDALERT","TextArea","Reminder","id","key","setKey","current","setCurrent","addNotification","options","data","loading","variables","subject","onChange","target","value","messageId","message","onFinish","info","input","serviceId","typeNotification","then","success","catch","error","console","log","messages","nodes","map","cursor","width","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Input, Card, Tag, Space, Divider, notification } from \"antd\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { MESSAGEBYSUBJECT } from \"../../Gql/Query\";\nimport { ButtonSend } from \"../Shared/Button\";\nimport { ADDALERT } from \"../../Gql/Mutation\";\n\nconst { TextArea } = Input;\n\nexport const Reminder = ({ id }) => {\n  const [key, setKey] = useState(0);\n  const [current, setCurrent] = useState(null);\n  const [addNotification, options] = useMutation(ADDALERT);\n  const { data, loading } = useQuery(MESSAGEBYSUBJECT, {\n    variables: { subject: \"Relance\" },\n  });\n\n  const onChange = ({ target: { value } }) => {\n    setCurrent({ messageId: null, message: value });\n  };\n\n  const onFinish = () => {\n    if (!current?.message) {\n      notification.info({ message: \"Le message est obligatoire !\" });\n    } else {\n      addNotification({\n        variables: {\n          input: { ...current, serviceId: id, typeNotification: \"RAPPELLE\" },\n        },\n      })\n        .then(() => {\n          notification.success({\n            message: \"Votre relance a été pris en compte !\",\n          });\n          setKey((key) => key + 1);\n        })\n        .catch((error) => {\n          console.log(error);\n          notification.error({\n            message: \"Une erreur est survenue. Veillez réessayer plus tard !\",\n          });\n        });\n    }\n  };\n\n  return (\n    <Card loading={loading} key={key}>\n      <TextArea rows={1} value={current?.message} onChange={onChange} />\n      <Divider />\n      <Space direction=\"vertical\">\n        {data?.messages.nodes.map(({ id, message }) => (\n          <Tag\n            key={id}\n            color=\"#1DA57A\"\n            style={{ cursor: \"pointer\", width: \"100%\", borderRadius: 5 }}\n            onClick={() => setCurrent({ messageId: id, message })}\n          >\n            {message}\n          </Tag>\n        ))}\n      </Space>\n      <Divider />\n      <ButtonSend type=\"primary\" onClick={onFinish} loading={options.loading} />\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}