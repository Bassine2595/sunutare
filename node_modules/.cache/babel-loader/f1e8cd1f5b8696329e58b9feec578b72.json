{"ast":null,"code":"import \"antd/es/spin/style\";\nimport _Spin from \"antd/es/spin\";\nimport \"antd/es/card/style\";\nimport _Card from \"antd/es/card\";\nimport \"antd/es/statistic/style\";\nimport _Statistic from \"antd/es/statistic\";\nvar _jsxFileName = \"/home/bassine/Documents/ProjetSunutare/frontend-manager/src/component/Statistic/Service.tsx\";\nimport React, { useContext, useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { UserContext } from \"../Context\";\nimport { ServicesCount, SERVICEDELIVEREDWITHIN7DAYS, NUMBEROFSERVICEPERDAYS, NUMBEROFSERVICEPERMONTHS, PRESSURERATE } from \"../../Gql/Aggregate\";\nimport { ShoppingOutlined } from \"@ant-design/icons\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport moment from \"moment\";\nimport { SerciceByMonth } from \"./ServiceByMonth\";\nimport { useModal } from \"../../hooks/useModal\";\nimport ReactEcharts from \"echarts-for-react\";\nimport _ from \"lodash\";\nconst ends = moment().add(1, \"week\");\nconst week = moment().startOf(\"week\").add(1, \"day\");\nconst Config = {\n  lineTension: 0.1,\n  borderColor: \"#1DA57A\",\n  pointBorderColor: \"#1DA57A\",\n  pointHoverBackgroundColor: \"#1DA57A\",\n  pointHoverBorderColor: \"rgba(220,220,220,1)\",\n  pointHoverBorderWidth: 2,\n  pointRadius: 1,\n  pointHitRadius: 10\n};\nexport const Count = () => {\n  const {\n    user\n  } = useContext(UserContext);\n  const {\n    data,\n    loading\n  } = useQuery(ServicesCount, {\n    variables: {\n      workshopId: user.workshop.id\n    }\n  });\n  return /*#__PURE__*/React.createElement(_Card, {\n    hoverable: true,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, data && /*#__PURE__*/React.createElement(_Statistic, {\n    title: \"Service en cours\",\n    value: data.services.totalCount,\n    suffix: /*#__PURE__*/React.createElement(ShoppingOutlined, {\n      style: {\n        fontSize: 30\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 19\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }));\n};\nexport const DeliveredWithin7Days = () => {\n  const {\n    user\n  } = useContext(UserContext);\n  const {\n    data,\n    loading\n  } = useQuery(SERVICEDELIVEREDWITHIN7DAYS, {\n    variables: {\n      workshopId: user.workshop.id,\n      ends\n    }\n  });\n  return /*#__PURE__*/React.createElement(_Card, {\n    hoverable: true,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, data && /*#__PURE__*/React.createElement(_Statistic, {\n    title: `Nombre de services Ã  livrer avant le ${ends.format(\"DD/MM/YYYY\")}`,\n    value: data.services.totalCount,\n    suffix: /*#__PURE__*/React.createElement(ShoppingOutlined, {\n      style: {\n        fontSize: 30\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 19\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }));\n};\nexport const NumberOfServicePerDays = () => {\n  const {\n    user\n  } = useContext(UserContext);\n  const {\n    data,\n    loading\n  } = useQuery(NUMBEROFSERVICEPERDAYS, {\n    variables: {\n      workshopId: user.workshop.id\n    }\n  });\n  const options = {\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        type: \"time\",\n        time: {\n          unit: \"day\",\n          tooltipFormat: \"DD MMM\",\n          displayFormats: {\n            day: \"DD MMM\"\n          }\n        }\n      }]\n    }\n  };\n  return /*#__PURE__*/React.createElement(_Card, {\n    hoverable: true,\n    loading: loading,\n    title: \"Nombre de services par jour\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, data && /*#__PURE__*/React.createElement(Line, {\n    height: 157,\n    data: {\n      labels: data.all.nodes.map(({\n        day\n      }) => day),\n      datasets: [{ ...Config,\n        data: data.all.nodes.map(({\n          count\n        }) => count)\n      }]\n    },\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }));\n};\nexport const NumberOfServicePerMonths = () => {\n  const {\n    user\n  } = useContext(UserContext);\n  const {\n    data,\n    loading\n  } = useQuery(NUMBEROFSERVICEPERMONTHS, {\n    variables: {\n      workshopId: user.workshop.id\n    }\n  });\n  const [month, setMonth] = useState();\n  const [visible, toggle] = useModal();\n\n  const onElementsClick = ([item]) => {\n    if (item) {\n      setMonth(data.all.nodes[item._index].month);\n      toggle();\n    }\n  };\n\n  const options = {\n    legend: {\n      display: false\n    },\n    onClick: (_, item) => onElementsClick(item),\n    scales: {\n      xAxes: [{\n        type: \"time\",\n        time: {\n          unit: \"day\",\n          tooltipFormat: \"MMM\",\n          displayFormats: {\n            day: \"MMM\"\n          }\n        }\n      }]\n    }\n  };\n  return /*#__PURE__*/React.createElement(_Card, {\n    hoverable: true,\n    loading: loading,\n    title: \"Nombre de services en fonction des mois\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }\n  }, month && /*#__PURE__*/React.createElement(SerciceByMonth, {\n    month: month,\n    visible: visible,\n    onCancel: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }), data && /*#__PURE__*/React.createElement(Bar, {\n    height: 157,\n    data: {\n      labels: data.all.nodes.map(({\n        month\n      }) => month),\n      datasets: [{\n        data: data.all.nodes.map(({\n          count\n        }) => count)\n      }]\n    },\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }));\n};\nexport const PressureRate = () => {\n  const {\n    user\n  } = useContext(UserContext);\n  const {\n    data,\n    loading\n  } = useQuery(PRESSURERATE, {\n    variables: {\n      workshopId: user.workshop.id,\n      week\n    }\n  });\n\n  const percent = () => {\n    var _data$numberOfService, _data$numberOfService2, _data$averageNumberOf, _data$averageNumberOf2;\n\n    return 100 * (data === null || data === void 0 ? void 0 : (_data$numberOfService = data.numberOfServiceToStartDuringWeeks) === null || _data$numberOfService === void 0 ? void 0 : (_data$numberOfService2 = _data$numberOfService.nodes[0]) === null || _data$numberOfService2 === void 0 ? void 0 : _data$numberOfService2.count) / (data === null || data === void 0 ? void 0 : (_data$averageNumberOf = data.averageNumberOfServicesPerWeeks) === null || _data$averageNumberOf === void 0 ? void 0 : (_data$averageNumberOf2 = _data$averageNumberOf.nodes[0]) === null || _data$averageNumberOf2 === void 0 ? void 0 : _data$averageNumberOf2.avg);\n  };\n\n  return /*#__PURE__*/React.createElement(_Card, {\n    title: \"Taux de pression\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 5\n    }\n  }, loading ? /*#__PURE__*/React.createElement(_Spin, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(ReactEcharts, {\n    option: {\n      series: [{\n        type: \"gauge\",\n        detail: {\n          formatter: \"{value}%\"\n        },\n        data: [{\n          value: _.isNaN(percent()) ? 0 : percent()\n        }],\n        axisLabel: {\n          show: false\n        }\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }));\n};","map":{"version":3,"sources":["/home/bassine/Documents/ProjetSunutare/frontend-manager/src/component/Statistic/Service.tsx"],"names":["React","useContext","useState","useQuery","UserContext","ServicesCount","SERVICEDELIVEREDWITHIN7DAYS","NUMBEROFSERVICEPERDAYS","NUMBEROFSERVICEPERMONTHS","PRESSURERATE","ShoppingOutlined","Line","Bar","moment","SerciceByMonth","useModal","ReactEcharts","_","ends","add","week","startOf","Config","lineTension","borderColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","Count","user","data","loading","variables","workshopId","workshop","id","services","totalCount","fontSize","DeliveredWithin7Days","format","NumberOfServicePerDays","options","legend","display","scales","xAxes","type","time","unit","tooltipFormat","displayFormats","day","labels","all","nodes","map","datasets","count","NumberOfServicePerMonths","month","setMonth","visible","toggle","onElementsClick","item","_index","onClick","PressureRate","percent","numberOfServiceToStartDuringWeeks","averageNumberOfServicesPerWeeks","avg","series","detail","formatter","value","isNaN","axisLabel","show"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { UserContext } from \"../Context\";\nimport {\n  ServicesCount,\n  SERVICEDELIVEREDWITHIN7DAYS,\n  NUMBEROFSERVICEPERDAYS,\n  NUMBEROFSERVICEPERMONTHS,\n  PRESSURERATE,\n} from \"../../Gql/Aggregate\";\nimport { Card, Statistic, Spin } from \"antd\";\nimport { ShoppingOutlined } from \"@ant-design/icons\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport moment from \"moment\";\nimport { SerciceByMonth } from \"./ServiceByMonth\";\nimport { useModal } from \"../../hooks/useModal\";\nimport ReactEcharts from \"echarts-for-react\";\nimport _ from \"lodash\";\n\nconst ends = moment().add(1, \"week\");\nconst week = moment().startOf(\"week\").add(1, \"day\");\n\nconst Config = {\n  lineTension: 0.1,\n  borderColor: \"#1DA57A\",\n  pointBorderColor: \"#1DA57A\",\n  pointHoverBackgroundColor: \"#1DA57A\",\n  pointHoverBorderColor: \"rgba(220,220,220,1)\",\n  pointHoverBorderWidth: 2,\n  pointRadius: 1,\n  pointHitRadius: 10,\n};\n\nexport const Count = () => {\n  const { user } = useContext(UserContext);\n  const { data, loading } = useQuery(ServicesCount, {\n    variables: { workshopId: user.workshop.id },\n  });\n  return (\n    <Card hoverable loading={loading}>\n      {data && (\n        <Statistic\n          title=\"Service en cours\"\n          value={data.services.totalCount}\n          suffix={<ShoppingOutlined style={{ fontSize: 30 }} />}\n        />\n      )}\n    </Card>\n  );\n};\n\nexport const DeliveredWithin7Days = () => {\n  const { user } = useContext(UserContext);\n  const { data, loading } = useQuery(SERVICEDELIVEREDWITHIN7DAYS, {\n    variables: { workshopId: user.workshop.id, ends },\n  });\n  return (\n    <Card hoverable loading={loading}>\n      {data && (\n        <Statistic\n          title={`Nombre de services Ã  livrer avant le ${ends.format(\n            \"DD/MM/YYYY\"\n          )}`}\n          value={data.services.totalCount}\n          suffix={<ShoppingOutlined style={{ fontSize: 30 }} />}\n        />\n      )}\n    </Card>\n  );\n};\n\nexport const NumberOfServicePerDays = () => {\n  const { user } = useContext(UserContext);\n  const { data, loading } = useQuery(NUMBEROFSERVICEPERDAYS, {\n    variables: { workshopId: user.workshop.id },\n  });\n  const options = {\n    legend: {\n      display: false,\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            unit: \"day\",\n            tooltipFormat: \"DD MMM\",\n            displayFormats: {\n              day: \"DD MMM\",\n            },\n          },\n        },\n      ],\n    },\n  };\n  return (\n    <Card hoverable loading={loading} title=\"Nombre de services par jour\">\n      {data && (\n        <Line\n          height={157}\n          data={{\n            labels: data.all.nodes.map(({ day }) => day),\n            datasets: [\n              {\n                ...Config,\n                data: data.all.nodes.map(({ count }) => count),\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </Card>\n  );\n};\n\nexport const NumberOfServicePerMonths = () => {\n  const { user } = useContext(UserContext);\n  const { data, loading } = useQuery(NUMBEROFSERVICEPERMONTHS, {\n    variables: { workshopId: user.workshop.id },\n  });\n  const [month, setMonth] = useState();\n  const [visible, toggle] = useModal();\n  const onElementsClick = ([item]) => {\n    if (item) {\n      setMonth(data.all.nodes[item._index].month);\n      toggle();\n    }\n  };\n\n  const options = {\n    legend: {\n      display: false,\n    },\n    onClick: (_, item) => onElementsClick(item),\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            unit: \"day\",\n            tooltipFormat: \"MMM\",\n            displayFormats: {\n              day: \"MMM\",\n            },\n          },\n        },\n      ],\n    },\n  };\n\n  return (\n    <Card\n      hoverable\n      loading={loading}\n      title=\"Nombre de services en fonction des mois\"\n    >\n      {month && (\n        <SerciceByMonth month={month} visible={visible} onCancel={toggle} />\n      )}\n      {data && (\n        <Bar\n          height={157}\n          data={{\n            labels: data.all.nodes.map(({ month }) => month),\n            datasets: [\n              {\n                data: data.all.nodes.map(({ count }) => count),\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </Card>\n  );\n};\n\nexport const PressureRate = () => {\n  const { user } = useContext(UserContext);\n  const { data, loading } = useQuery(PRESSURERATE, {\n    variables: { workshopId: user.workshop.id, week },\n  });\n\n  const percent = () => {\n    return (\n      (100 * data?.numberOfServiceToStartDuringWeeks?.nodes[0]?.count) /\n      data?.averageNumberOfServicesPerWeeks?.nodes[0]?.avg\n    );\n  };\n  return (\n    <Card title=\"Taux de pression\">\n      {loading ? (\n        <Spin />\n      ) : (\n        <ReactEcharts\n          option={{\n            series: [\n              {\n                type: \"gauge\",\n                detail: { formatter: \"{value}%\" },\n                data: [\n                  {\n                    value: _.isNaN(percent()) ? 0 : percent(),\n                  },\n                ],\n                axisLabel: {\n                  show: false,\n                },\n              },\n            ],\n          }}\n        />\n      )}\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}