{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar RoamController = require(\"./RoamController\");\n\nvar roamHelper = require(\"../../component/helper/roamHelper\");\n\nvar _cursorHelper = require(\"../../component/helper/cursorHelper\");\n\nvar onIrrelevantElement = _cursorHelper.onIrrelevantElement;\n\nvar graphic = require(\"../../util/graphic\");\n\nvar geoSourceManager = require(\"../../coord/geo/geoSourceManager\");\n\nvar _component = require(\"../../util/component\");\n\nvar getUID = _component.getUID;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nfunction getFixedItemStyle(model) {\n  var itemStyle = model.getItemStyle();\n  var areaColor = model.get('areaColor'); // If user want the color not to be changed when hover,\n  // they should both set areaColor and color to be null.\n\n  if (areaColor != null) {\n    itemStyle.fill = areaColor;\n  }\n\n  return itemStyle;\n}\n\nfunction updateMapSelectHandler(mapDraw, mapOrGeoModel, regionsGroup, api, fromView) {\n  regionsGroup.off('click');\n  regionsGroup.off('mousedown');\n\n  if (mapOrGeoModel.get('selectedMode')) {\n    regionsGroup.on('mousedown', function () {\n      mapDraw._mouseDownFlag = true;\n    });\n    regionsGroup.on('click', function (e) {\n      if (!mapDraw._mouseDownFlag) {\n        return;\n      }\n\n      mapDraw._mouseDownFlag = false;\n      var el = e.target;\n\n      while (!el.__regions) {\n        el = el.parent;\n      }\n\n      if (!el) {\n        return;\n      }\n\n      var action = {\n        type: (mapOrGeoModel.mainType === 'geo' ? 'geo' : 'map') + 'ToggleSelect',\n        batch: zrUtil.map(el.__regions, function (region) {\n          return {\n            name: region.name,\n            from: fromView.uid\n          };\n        })\n      };\n      action[mapOrGeoModel.mainType + 'Id'] = mapOrGeoModel.id;\n      api.dispatchAction(action);\n      updateMapSelected(mapOrGeoModel, regionsGroup);\n    });\n  }\n}\n\nfunction updateMapSelected(mapOrGeoModel, regionsGroup) {\n  // FIXME\n  regionsGroup.eachChild(function (otherRegionEl) {\n    zrUtil.each(otherRegionEl.__regions, function (region) {\n      otherRegionEl.trigger(mapOrGeoModel.isSelected(region.name) ? 'emphasis' : 'normal');\n    });\n  });\n}\n/**\n * @alias module:echarts/component/helper/MapDraw\n * @param {module:echarts/ExtensionAPI} api\n * @param {boolean} updateGroup\n */\n\n\nfunction MapDraw(api, updateGroup) {\n  var group = new graphic.Group();\n  /**\n   * @type {string}\n   * @private\n   */\n\n  this.uid = getUID('ec_map_draw');\n  /**\n   * @type {module:echarts/component/helper/RoamController}\n   * @private\n   */\n\n  this._controller = new RoamController(api.getZr());\n  /**\n   * @type {Object} {target, zoom, zoomLimit}\n   * @private\n   */\n\n  this._controllerHost = {\n    target: updateGroup ? group : null\n  };\n  /**\n   * @type {module:zrender/container/Group}\n   * @readOnly\n   */\n\n  this.group = group;\n  /**\n   * @type {boolean}\n   * @private\n   */\n\n  this._updateGroup = updateGroup;\n  /**\n   * This flag is used to make sure that only one among\n   * `pan`, `zoom`, `click` can occurs, otherwise 'selected'\n   * action may be triggered when `pan`, which is unexpected.\n   * @type {booelan}\n   */\n\n  this._mouseDownFlag;\n  /**\n   * @type {string}\n   */\n\n  this._mapName;\n  /**\n   * @type {boolean}\n   */\n\n  this._initialized;\n  /**\n   * @type {module:zrender/container/Group}\n   */\n\n  group.add(this._regionsGroup = new graphic.Group());\n  /**\n   * @type {module:zrender/container/Group}\n   */\n\n  group.add(this._backgroundGroup = new graphic.Group());\n}\n\nMapDraw.prototype = {\n  constructor: MapDraw,\n  draw: function (mapOrGeoModel, ecModel, api, fromView, payload) {\n    var isGeo = mapOrGeoModel.mainType === 'geo'; // Map series has data. GEO model that controlled by map series\n    // will be assigned with map data. Other GEO model has no data.\n\n    var data = mapOrGeoModel.getData && mapOrGeoModel.getData();\n    isGeo && ecModel.eachComponent({\n      mainType: 'series',\n      subType: 'map'\n    }, function (mapSeries) {\n      if (!data && mapSeries.getHostGeoModel() === mapOrGeoModel) {\n        data = mapSeries.getData();\n      }\n    });\n    var geo = mapOrGeoModel.coordinateSystem;\n\n    this._updateBackground(geo);\n\n    var regionsGroup = this._regionsGroup;\n    var group = this.group;\n    var transformInfo = geo.getTransformInfo();\n    group.transform = transformInfo.roamTransform;\n    group.decomposeTransform();\n    group.dirty();\n    var scale = transformInfo.rawScale;\n    var position = transformInfo.rawPosition;\n    regionsGroup.removeAll();\n    var itemStyleAccessPath = ['itemStyle'];\n    var hoverItemStyleAccessPath = ['emphasis', 'itemStyle'];\n    var labelAccessPath = ['label'];\n    var hoverLabelAccessPath = ['emphasis', 'label'];\n    var nameMap = zrUtil.createHashMap();\n    zrUtil.each(geo.regions, function (region) {\n      // Consider in GeoJson properties.name may be duplicated, for example,\n      // there is multiple region named \"United Kindom\" or \"France\" (so many\n      // colonies). And it is not appropriate to merge them in geo, which\n      // will make them share the same label and bring trouble in label\n      // location calculation.\n      var regionGroup = nameMap.get(region.name) || nameMap.set(region.name, new graphic.Group());\n      var compoundPath = new graphic.CompoundPath({\n        segmentIgnoreThreshold: 1,\n        shape: {\n          paths: []\n        }\n      });\n      regionGroup.add(compoundPath);\n      var regionModel = mapOrGeoModel.getRegionModel(region.name) || mapOrGeoModel;\n      var itemStyleModel = regionModel.getModel(itemStyleAccessPath);\n      var hoverItemStyleModel = regionModel.getModel(hoverItemStyleAccessPath);\n      var itemStyle = getFixedItemStyle(itemStyleModel);\n      var hoverItemStyle = getFixedItemStyle(hoverItemStyleModel);\n      var labelModel = regionModel.getModel(labelAccessPath);\n      var hoverLabelModel = regionModel.getModel(hoverLabelAccessPath);\n      var dataIdx; // Use the itemStyle in data if has data\n\n      if (data) {\n        dataIdx = data.indexOfName(region.name); // Only visual color of each item will be used. It can be encoded by dataRange\n        // But visual color of series is used in symbol drawing\n        //\n        // Visual color for each series is for the symbol draw\n\n        var visualColor = data.getItemVisual(dataIdx, 'color', true);\n\n        if (visualColor) {\n          itemStyle.fill = visualColor;\n        }\n      }\n\n      var transformPoint = function (point) {\n        return [point[0] * scale[0] + position[0], point[1] * scale[1] + position[1]];\n      };\n\n      zrUtil.each(region.geometries, function (geometry) {\n        if (geometry.type !== 'polygon') {\n          return;\n        }\n\n        var points = [];\n\n        for (var i = 0; i < geometry.exterior.length; ++i) {\n          points.push(transformPoint(geometry.exterior[i]));\n        }\n\n        compoundPath.shape.paths.push(new graphic.Polygon({\n          segmentIgnoreThreshold: 1,\n          shape: {\n            points: points\n          }\n        }));\n\n        for (var i = 0; i < (geometry.interiors ? geometry.interiors.length : 0); ++i) {\n          var interior = geometry.interiors[i];\n          var points = [];\n\n          for (var j = 0; j < interior.length; ++j) {\n            points.push(transformPoint(interior[j]));\n          }\n\n          compoundPath.shape.paths.push(new graphic.Polygon({\n            segmentIgnoreThreshold: 1,\n            shape: {\n              points: points\n            }\n          }));\n        }\n      });\n      compoundPath.setStyle(itemStyle);\n      compoundPath.style.strokeNoScale = true;\n      compoundPath.culling = true; // Label\n\n      var showLabel = labelModel.get('show');\n      var hoverShowLabel = hoverLabelModel.get('show');\n      var isDataNaN = data && isNaN(data.get(data.mapDimension('value'), dataIdx));\n      var itemLayout = data && data.getItemLayout(dataIdx); // In the following cases label will be drawn\n      // 1. In map series and data value is NaN\n      // 2. In geo component\n      // 4. Region has no series legendSymbol, which will be add a showLabel flag in mapSymbolLayout\n\n      if (isGeo || isDataNaN && (showLabel || hoverShowLabel) || itemLayout && itemLayout.showLabel) {\n        var query = !isGeo ? dataIdx : region.name;\n        var labelFetcher; // Consider dataIdx not found.\n\n        if (!data || dataIdx >= 0) {\n          labelFetcher = mapOrGeoModel;\n        }\n\n        var textEl = new graphic.Text({\n          position: transformPoint(region.center.slice()),\n          // FIXME\n          // label rotation is not support yet in geo or regions of series-map\n          // that has no data. The rotation will be effected by this `scale`.\n          // So needed to change to RectText?\n          scale: [1 / group.scale[0], 1 / group.scale[1]],\n          z2: 10,\n          silent: true\n        });\n        graphic.setLabelStyle(textEl.style, textEl.hoverStyle = {}, labelModel, hoverLabelModel, {\n          labelFetcher: labelFetcher,\n          labelDataIndex: query,\n          defaultText: region.name,\n          useInsideStyle: false\n        }, {\n          textAlign: 'center',\n          textVerticalAlign: 'middle'\n        });\n        regionGroup.add(textEl);\n      } // setItemGraphicEl, setHoverStyle after all polygons and labels\n      // are added to the rigionGroup\n\n\n      if (data) {\n        data.setItemGraphicEl(dataIdx, regionGroup);\n      } else {\n        var regionModel = mapOrGeoModel.getRegionModel(region.name); // Package custom mouse event for geo component\n\n        compoundPath.eventData = {\n          componentType: 'geo',\n          componentIndex: mapOrGeoModel.componentIndex,\n          geoIndex: mapOrGeoModel.componentIndex,\n          name: region.name,\n          region: regionModel && regionModel.option || {}\n        };\n      }\n\n      var groupRegions = regionGroup.__regions || (regionGroup.__regions = []);\n      groupRegions.push(region);\n      regionGroup.highDownSilentOnTouch = !!mapOrGeoModel.get('selectedMode');\n      graphic.setHoverStyle(regionGroup, hoverItemStyle);\n      regionsGroup.add(regionGroup);\n    });\n\n    this._updateController(mapOrGeoModel, ecModel, api);\n\n    updateMapSelectHandler(this, mapOrGeoModel, regionsGroup, api, fromView);\n    updateMapSelected(mapOrGeoModel, regionsGroup);\n  },\n  remove: function () {\n    this._regionsGroup.removeAll();\n\n    this._backgroundGroup.removeAll();\n\n    this._controller.dispose();\n\n    this._mapName && geoSourceManager.removeGraphic(this._mapName, this.uid);\n    this._mapName = null;\n    this._controllerHost = {};\n  },\n  _updateBackground: function (geo) {\n    var mapName = geo.map;\n\n    if (this._mapName !== mapName) {\n      zrUtil.each(geoSourceManager.makeGraphic(mapName, this.uid), function (root) {\n        this._backgroundGroup.add(root);\n      }, this);\n    }\n\n    this._mapName = mapName;\n  },\n  _updateController: function (mapOrGeoModel, ecModel, api) {\n    var geo = mapOrGeoModel.coordinateSystem;\n    var controller = this._controller;\n    var controllerHost = this._controllerHost;\n    controllerHost.zoomLimit = mapOrGeoModel.get('scaleLimit');\n    controllerHost.zoom = geo.getZoom(); // roamType is will be set default true if it is null\n\n    controller.enable(mapOrGeoModel.get('roam') || false);\n    var mainType = mapOrGeoModel.mainType;\n\n    function makeActionBase() {\n      var action = {\n        type: 'geoRoam',\n        componentType: mainType\n      };\n      action[mainType + 'Id'] = mapOrGeoModel.id;\n      return action;\n    }\n\n    controller.off('pan').on('pan', function (e) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnPan(controllerHost, e.dx, e.dy);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        dx: e.dx,\n        dy: e.dy\n      }));\n    }, this);\n    controller.off('zoom').on('zoom', function (e) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnZoom(controllerHost, e.scale, e.originX, e.originY);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        zoom: e.scale,\n        originX: e.originX,\n        originY: e.originY\n      }));\n\n      if (this._updateGroup) {\n        var scale = this.group.scale;\n\n        this._regionsGroup.traverse(function (el) {\n          if (el.type === 'text') {\n            el.attr('scale', [1 / scale[0], 1 / scale[1]]);\n          }\n        });\n      }\n    }, this);\n    controller.setPointerChecker(function (e, x, y) {\n      return geo.getViewRectAfterRoam().contain(x, y) && !onIrrelevantElement(e, api, mapOrGeoModel);\n    });\n  }\n};\nvar _default = MapDraw;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/bassine/Documents/ProjetSunutare/frontend-manager/node_modules/echarts/lib/component/helper/MapDraw.js"],"names":["zrUtil","require","RoamController","roamHelper","_cursorHelper","onIrrelevantElement","graphic","geoSourceManager","_component","getUID","getFixedItemStyle","model","itemStyle","getItemStyle","areaColor","get","fill","updateMapSelectHandler","mapDraw","mapOrGeoModel","regionsGroup","api","fromView","off","on","_mouseDownFlag","e","el","target","__regions","parent","action","type","mainType","batch","map","region","name","from","uid","id","dispatchAction","updateMapSelected","eachChild","otherRegionEl","each","trigger","isSelected","MapDraw","updateGroup","group","Group","_controller","getZr","_controllerHost","_updateGroup","_mapName","_initialized","add","_regionsGroup","_backgroundGroup","prototype","constructor","draw","ecModel","payload","isGeo","data","getData","eachComponent","subType","mapSeries","getHostGeoModel","geo","coordinateSystem","_updateBackground","transformInfo","getTransformInfo","transform","roamTransform","decomposeTransform","dirty","scale","rawScale","position","rawPosition","removeAll","itemStyleAccessPath","hoverItemStyleAccessPath","labelAccessPath","hoverLabelAccessPath","nameMap","createHashMap","regions","regionGroup","set","compoundPath","CompoundPath","segmentIgnoreThreshold","shape","paths","regionModel","getRegionModel","itemStyleModel","getModel","hoverItemStyleModel","hoverItemStyle","labelModel","hoverLabelModel","dataIdx","indexOfName","visualColor","getItemVisual","transformPoint","point","geometries","geometry","points","i","exterior","length","push","Polygon","interiors","interior","j","setStyle","style","strokeNoScale","culling","showLabel","hoverShowLabel","isDataNaN","isNaN","mapDimension","itemLayout","getItemLayout","query","labelFetcher","textEl","Text","center","slice","z2","silent","setLabelStyle","hoverStyle","labelDataIndex","defaultText","useInsideStyle","textAlign","textVerticalAlign","setItemGraphicEl","eventData","componentType","componentIndex","geoIndex","option","groupRegions","highDownSilentOnTouch","setHoverStyle","_updateController","remove","dispose","removeGraphic","mapName","makeGraphic","root","controller","controllerHost","zoomLimit","zoom","getZoom","enable","makeActionBase","updateViewOnPan","dx","dy","extend","updateViewOnZoom","originX","originY","traverse","attr","setPointerChecker","x","y","getViewRectAfterRoam","contain","_default","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar RoamController = require(\"./RoamController\");\n\nvar roamHelper = require(\"../../component/helper/roamHelper\");\n\nvar _cursorHelper = require(\"../../component/helper/cursorHelper\");\n\nvar onIrrelevantElement = _cursorHelper.onIrrelevantElement;\n\nvar graphic = require(\"../../util/graphic\");\n\nvar geoSourceManager = require(\"../../coord/geo/geoSourceManager\");\n\nvar _component = require(\"../../util/component\");\n\nvar getUID = _component.getUID;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nfunction getFixedItemStyle(model) {\n  var itemStyle = model.getItemStyle();\n  var areaColor = model.get('areaColor'); // If user want the color not to be changed when hover,\n  // they should both set areaColor and color to be null.\n\n  if (areaColor != null) {\n    itemStyle.fill = areaColor;\n  }\n\n  return itemStyle;\n}\n\nfunction updateMapSelectHandler(mapDraw, mapOrGeoModel, regionsGroup, api, fromView) {\n  regionsGroup.off('click');\n  regionsGroup.off('mousedown');\n\n  if (mapOrGeoModel.get('selectedMode')) {\n    regionsGroup.on('mousedown', function () {\n      mapDraw._mouseDownFlag = true;\n    });\n    regionsGroup.on('click', function (e) {\n      if (!mapDraw._mouseDownFlag) {\n        return;\n      }\n\n      mapDraw._mouseDownFlag = false;\n      var el = e.target;\n\n      while (!el.__regions) {\n        el = el.parent;\n      }\n\n      if (!el) {\n        return;\n      }\n\n      var action = {\n        type: (mapOrGeoModel.mainType === 'geo' ? 'geo' : 'map') + 'ToggleSelect',\n        batch: zrUtil.map(el.__regions, function (region) {\n          return {\n            name: region.name,\n            from: fromView.uid\n          };\n        })\n      };\n      action[mapOrGeoModel.mainType + 'Id'] = mapOrGeoModel.id;\n      api.dispatchAction(action);\n      updateMapSelected(mapOrGeoModel, regionsGroup);\n    });\n  }\n}\n\nfunction updateMapSelected(mapOrGeoModel, regionsGroup) {\n  // FIXME\n  regionsGroup.eachChild(function (otherRegionEl) {\n    zrUtil.each(otherRegionEl.__regions, function (region) {\n      otherRegionEl.trigger(mapOrGeoModel.isSelected(region.name) ? 'emphasis' : 'normal');\n    });\n  });\n}\n/**\n * @alias module:echarts/component/helper/MapDraw\n * @param {module:echarts/ExtensionAPI} api\n * @param {boolean} updateGroup\n */\n\n\nfunction MapDraw(api, updateGroup) {\n  var group = new graphic.Group();\n  /**\n   * @type {string}\n   * @private\n   */\n\n  this.uid = getUID('ec_map_draw');\n  /**\n   * @type {module:echarts/component/helper/RoamController}\n   * @private\n   */\n\n  this._controller = new RoamController(api.getZr());\n  /**\n   * @type {Object} {target, zoom, zoomLimit}\n   * @private\n   */\n\n  this._controllerHost = {\n    target: updateGroup ? group : null\n  };\n  /**\n   * @type {module:zrender/container/Group}\n   * @readOnly\n   */\n\n  this.group = group;\n  /**\n   * @type {boolean}\n   * @private\n   */\n\n  this._updateGroup = updateGroup;\n  /**\n   * This flag is used to make sure that only one among\n   * `pan`, `zoom`, `click` can occurs, otherwise 'selected'\n   * action may be triggered when `pan`, which is unexpected.\n   * @type {booelan}\n   */\n\n  this._mouseDownFlag;\n  /**\n   * @type {string}\n   */\n\n  this._mapName;\n  /**\n   * @type {boolean}\n   */\n\n  this._initialized;\n  /**\n   * @type {module:zrender/container/Group}\n   */\n\n  group.add(this._regionsGroup = new graphic.Group());\n  /**\n   * @type {module:zrender/container/Group}\n   */\n\n  group.add(this._backgroundGroup = new graphic.Group());\n}\n\nMapDraw.prototype = {\n  constructor: MapDraw,\n  draw: function (mapOrGeoModel, ecModel, api, fromView, payload) {\n    var isGeo = mapOrGeoModel.mainType === 'geo'; // Map series has data. GEO model that controlled by map series\n    // will be assigned with map data. Other GEO model has no data.\n\n    var data = mapOrGeoModel.getData && mapOrGeoModel.getData();\n    isGeo && ecModel.eachComponent({\n      mainType: 'series',\n      subType: 'map'\n    }, function (mapSeries) {\n      if (!data && mapSeries.getHostGeoModel() === mapOrGeoModel) {\n        data = mapSeries.getData();\n      }\n    });\n    var geo = mapOrGeoModel.coordinateSystem;\n\n    this._updateBackground(geo);\n\n    var regionsGroup = this._regionsGroup;\n    var group = this.group;\n    var transformInfo = geo.getTransformInfo();\n    group.transform = transformInfo.roamTransform;\n    group.decomposeTransform();\n    group.dirty();\n    var scale = transformInfo.rawScale;\n    var position = transformInfo.rawPosition;\n    regionsGroup.removeAll();\n    var itemStyleAccessPath = ['itemStyle'];\n    var hoverItemStyleAccessPath = ['emphasis', 'itemStyle'];\n    var labelAccessPath = ['label'];\n    var hoverLabelAccessPath = ['emphasis', 'label'];\n    var nameMap = zrUtil.createHashMap();\n    zrUtil.each(geo.regions, function (region) {\n      // Consider in GeoJson properties.name may be duplicated, for example,\n      // there is multiple region named \"United Kindom\" or \"France\" (so many\n      // colonies). And it is not appropriate to merge them in geo, which\n      // will make them share the same label and bring trouble in label\n      // location calculation.\n      var regionGroup = nameMap.get(region.name) || nameMap.set(region.name, new graphic.Group());\n      var compoundPath = new graphic.CompoundPath({\n        segmentIgnoreThreshold: 1,\n        shape: {\n          paths: []\n        }\n      });\n      regionGroup.add(compoundPath);\n      var regionModel = mapOrGeoModel.getRegionModel(region.name) || mapOrGeoModel;\n      var itemStyleModel = regionModel.getModel(itemStyleAccessPath);\n      var hoverItemStyleModel = regionModel.getModel(hoverItemStyleAccessPath);\n      var itemStyle = getFixedItemStyle(itemStyleModel);\n      var hoverItemStyle = getFixedItemStyle(hoverItemStyleModel);\n      var labelModel = regionModel.getModel(labelAccessPath);\n      var hoverLabelModel = regionModel.getModel(hoverLabelAccessPath);\n      var dataIdx; // Use the itemStyle in data if has data\n\n      if (data) {\n        dataIdx = data.indexOfName(region.name); // Only visual color of each item will be used. It can be encoded by dataRange\n        // But visual color of series is used in symbol drawing\n        //\n        // Visual color for each series is for the symbol draw\n\n        var visualColor = data.getItemVisual(dataIdx, 'color', true);\n\n        if (visualColor) {\n          itemStyle.fill = visualColor;\n        }\n      }\n\n      var transformPoint = function (point) {\n        return [point[0] * scale[0] + position[0], point[1] * scale[1] + position[1]];\n      };\n\n      zrUtil.each(region.geometries, function (geometry) {\n        if (geometry.type !== 'polygon') {\n          return;\n        }\n\n        var points = [];\n\n        for (var i = 0; i < geometry.exterior.length; ++i) {\n          points.push(transformPoint(geometry.exterior[i]));\n        }\n\n        compoundPath.shape.paths.push(new graphic.Polygon({\n          segmentIgnoreThreshold: 1,\n          shape: {\n            points: points\n          }\n        }));\n\n        for (var i = 0; i < (geometry.interiors ? geometry.interiors.length : 0); ++i) {\n          var interior = geometry.interiors[i];\n          var points = [];\n\n          for (var j = 0; j < interior.length; ++j) {\n            points.push(transformPoint(interior[j]));\n          }\n\n          compoundPath.shape.paths.push(new graphic.Polygon({\n            segmentIgnoreThreshold: 1,\n            shape: {\n              points: points\n            }\n          }));\n        }\n      });\n      compoundPath.setStyle(itemStyle);\n      compoundPath.style.strokeNoScale = true;\n      compoundPath.culling = true; // Label\n\n      var showLabel = labelModel.get('show');\n      var hoverShowLabel = hoverLabelModel.get('show');\n      var isDataNaN = data && isNaN(data.get(data.mapDimension('value'), dataIdx));\n      var itemLayout = data && data.getItemLayout(dataIdx); // In the following cases label will be drawn\n      // 1. In map series and data value is NaN\n      // 2. In geo component\n      // 4. Region has no series legendSymbol, which will be add a showLabel flag in mapSymbolLayout\n\n      if (isGeo || isDataNaN && (showLabel || hoverShowLabel) || itemLayout && itemLayout.showLabel) {\n        var query = !isGeo ? dataIdx : region.name;\n        var labelFetcher; // Consider dataIdx not found.\n\n        if (!data || dataIdx >= 0) {\n          labelFetcher = mapOrGeoModel;\n        }\n\n        var textEl = new graphic.Text({\n          position: transformPoint(region.center.slice()),\n          // FIXME\n          // label rotation is not support yet in geo or regions of series-map\n          // that has no data. The rotation will be effected by this `scale`.\n          // So needed to change to RectText?\n          scale: [1 / group.scale[0], 1 / group.scale[1]],\n          z2: 10,\n          silent: true\n        });\n        graphic.setLabelStyle(textEl.style, textEl.hoverStyle = {}, labelModel, hoverLabelModel, {\n          labelFetcher: labelFetcher,\n          labelDataIndex: query,\n          defaultText: region.name,\n          useInsideStyle: false\n        }, {\n          textAlign: 'center',\n          textVerticalAlign: 'middle'\n        });\n        regionGroup.add(textEl);\n      } // setItemGraphicEl, setHoverStyle after all polygons and labels\n      // are added to the rigionGroup\n\n\n      if (data) {\n        data.setItemGraphicEl(dataIdx, regionGroup);\n      } else {\n        var regionModel = mapOrGeoModel.getRegionModel(region.name); // Package custom mouse event for geo component\n\n        compoundPath.eventData = {\n          componentType: 'geo',\n          componentIndex: mapOrGeoModel.componentIndex,\n          geoIndex: mapOrGeoModel.componentIndex,\n          name: region.name,\n          region: regionModel && regionModel.option || {}\n        };\n      }\n\n      var groupRegions = regionGroup.__regions || (regionGroup.__regions = []);\n      groupRegions.push(region);\n      regionGroup.highDownSilentOnTouch = !!mapOrGeoModel.get('selectedMode');\n      graphic.setHoverStyle(regionGroup, hoverItemStyle);\n      regionsGroup.add(regionGroup);\n    });\n\n    this._updateController(mapOrGeoModel, ecModel, api);\n\n    updateMapSelectHandler(this, mapOrGeoModel, regionsGroup, api, fromView);\n    updateMapSelected(mapOrGeoModel, regionsGroup);\n  },\n  remove: function () {\n    this._regionsGroup.removeAll();\n\n    this._backgroundGroup.removeAll();\n\n    this._controller.dispose();\n\n    this._mapName && geoSourceManager.removeGraphic(this._mapName, this.uid);\n    this._mapName = null;\n    this._controllerHost = {};\n  },\n  _updateBackground: function (geo) {\n    var mapName = geo.map;\n\n    if (this._mapName !== mapName) {\n      zrUtil.each(geoSourceManager.makeGraphic(mapName, this.uid), function (root) {\n        this._backgroundGroup.add(root);\n      }, this);\n    }\n\n    this._mapName = mapName;\n  },\n  _updateController: function (mapOrGeoModel, ecModel, api) {\n    var geo = mapOrGeoModel.coordinateSystem;\n    var controller = this._controller;\n    var controllerHost = this._controllerHost;\n    controllerHost.zoomLimit = mapOrGeoModel.get('scaleLimit');\n    controllerHost.zoom = geo.getZoom(); // roamType is will be set default true if it is null\n\n    controller.enable(mapOrGeoModel.get('roam') || false);\n    var mainType = mapOrGeoModel.mainType;\n\n    function makeActionBase() {\n      var action = {\n        type: 'geoRoam',\n        componentType: mainType\n      };\n      action[mainType + 'Id'] = mapOrGeoModel.id;\n      return action;\n    }\n\n    controller.off('pan').on('pan', function (e) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnPan(controllerHost, e.dx, e.dy);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        dx: e.dx,\n        dy: e.dy\n      }));\n    }, this);\n    controller.off('zoom').on('zoom', function (e) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnZoom(controllerHost, e.scale, e.originX, e.originY);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        zoom: e.scale,\n        originX: e.originX,\n        originY: e.originY\n      }));\n\n      if (this._updateGroup) {\n        var scale = this.group.scale;\n\n        this._regionsGroup.traverse(function (el) {\n          if (el.type === 'text') {\n            el.attr('scale', [1 / scale[0], 1 / scale[1]]);\n          }\n        });\n      }\n    }, this);\n    controller.setPointerChecker(function (e, x, y) {\n      return geo.getViewRectAfterRoam().contain(x, y) && !onIrrelevantElement(e, api, mapOrGeoModel);\n    });\n  }\n};\nvar _default = MapDraw;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}