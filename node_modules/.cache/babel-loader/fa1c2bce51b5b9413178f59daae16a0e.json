{"ast":null,"code":"import gql from \"graphql-tag\";\nexport const CREATEADDRESS = gql`\n  mutation($address: AddressInput!) {\n    address: createAddress(input: { address: $address }) {\n      address {\n        id\n      }\n    }\n  }\n`;\nexport const ACTIVEUSER = gql`\n  mutation($id: UUID!) {\n    updateUser(input: { patch: { isActive: true }, id: $id }) {\n      clientMutationId\n    }\n  }\n`;\nexport const CREATEWORKSHOP = gql`\n  mutation($addWorkshop: AddWorkshopInput!) {\n    __typename\n    addWorkshop(input: $addWorkshop) {\n      clientMutationId\n    }\n  }\n`;\nexport const LOGIN = gql`\n  mutation($mail: String!, $password: String!) {\n    login(input: { password: $password, mail: $mail }) {\n      jwtToken\n    }\n  }\n`;\nexport const REGISTER = gql`\n  mutation($input: RegisterInput!) {\n    register(input: $input) {\n      jwtToken\n    }\n  }\n`;\nexport const ADDALERT = gql`\n  mutation($input: AddAlertInput!) {\n    __typename\n    addAlert(input: $input) {\n      clientMutationId\n    }\n  }\n`;\nexport const GENERATETOKEN = gql`\n  mutation($mail: String!) {\n    token: generateToken(input: { mail: $mail }) {\n      jwtToken\n    }\n  }\n`;\nexport const UPDATEADDRESS = gql`\n  mutation($id: UUID!, $patch: AddressPatch!) {\n    updateAddress(input: { patch: $patch, id: $id }) {\n      address {\n        id\n      }\n    }\n  }\n`;\nexport const UPDATEPROFILL = gql`\n  mutation($id: UUID!, $phone: String, $firstName: String, $lastName: String) {\n    updateUser(\n      input: {\n        patch: { phone: $phone, lastName: $lastName, firstName: $firstName }\n        id: $id\n      }\n    ) {\n      clientMutationId\n    }\n  }\n`;\nexport const UPDATEPASSWORD = gql`\n  mutation($id: UUID!, $password: String!) {\n    updateUser(input: { patch: { password: $password }, id: $id }) {\n      clientMutationId\n    }\n  }\n`;\nexport const UPDATEWORKSHOP = gql`\n  mutation($id: UUID!, $patch: WorkshopPatch!) {\n    updateWorkshop(input: { patch: $patch, id: $id }) {\n      clientMutationId\n    }\n  }\n`;\nexport const ADDSERVICE = gql`\n  mutation($input: AddServiceInput!) {\n    __typename\n    addService(input: $input) {\n      code: integer\n    }\n  }\n`;\nexport const UPDATESERVICE = gql`\n  mutation($id: UUID!, $patch: ServicePatch!) {\n    __typename\n    updateService(input: { patch: $patch, id: $id }) {\n      clientMutationId\n    }\n  }\n`;\nexport const UPDATESERVICEBYCODE = gql`\n  mutation($code: Int!, $patch: ServicePatch!) {\n    __typename\n    updateServiceByCode(input: { patch: $patch, code: $code }) {\n      clientMutationId\n    }\n  }\n`;\nexport const CREATEMODELE = gql`\n  mutation($modele: ModeleInput!) {\n    __typename\n    createModele(input: { modele: $modele }) {\n      modele {\n        id\n      }\n    }\n  }\n`;\nexport const UPDATEMODELE = gql`\n  mutation($id: UUID!, $patch: ModelePatch!) {\n    __typename\n    updateModele(input: { patch: $patch, id: $id }) {\n      clientMutationId\n    }\n  }\n`;\nexport const DELETEMODELE = gql`\n  mutation($id: UUID!) {\n    __typename\n    deleteModele(input: { id: $id }) {\n      clientMutationId\n    }\n  }\n`;\nexport const FORGETPASSWORD = gql`\n  mutation($mail: String!) {\n    __typename\n    token: forgetPassword(input: { mail: $mail }) {\n      jwtToken\n    }\n  }\n`;\nexport const CREATEMEASURE = gql`\n  mutation($measure: MeasureInput!) {\n    __typename\n    createMeasure(input: { measure: $measure }) {\n      measure {\n        id\n        breasts\n        hips\n        length\n        longSleeve\n        lowsLeeve\n        pants\n        width\n      }\n    }\n  }\n`;\nexport const UPDATEMEASURE = gql`\n  mutation($id: UUID!, $patch: MeasurePatch!) {\n    updateMeasure(input: { patch: $patch, id: $id }) {\n      measure {\n        id\n        breasts\n        createdAt\n        hips\n        length\n        longSleeve\n        lowsLeeve\n        updateAt\n        width\n        belt\n        pants\n      }\n    }\n  }\n`;\nexport const CREATEEMPLOYER = gql`\n  mutation($input: AddEmployerInput!) {\n    __typename\n    addEmployer(input: $input) {\n      code: integer\n    }\n  }\n`;\nexport const CUSTOMEREXIST = gql`\n  mutation($phone: String!, $mail: String) {\n    __typename\n    customerExist(input: { phone: $phone, mail: $mail }) {\n      exist: boolean\n    }\n  }\n`;\nexport const EMPLOYEREXIST = gql`\n  mutation($phone: String!, $mail: String) {\n    __typename\n    employerExist(input: { phone: $phone, mail: $mail }) {\n      exist: boolean\n    }\n  }\n`;\nexport const MATCHSERVICEEMPLOYER = gql`\n  mutation($codeService: Int!, $codeEmployer: Int!) {\n    __typename\n    matchServiceEmployer(\n      input: { codeService: $codeService, codeEmployer: $codeEmployer }\n    ) {\n      match: boolean\n    }\n  }\n`;\nexport const UPDATEEMPLOYER = gql`\n  mutation($id: UUID!, $patch: ModelePatch!) {\n    __typename\n    updateEmployer(input: { patch: $patch, id: $id }) {\n      clientMutationId\n    }\n  }\n`;","map":{"version":3,"sources":["/home/bassine/Documents/ProjetSunutare/frontend-manager/src/Gql/Mutation.ts"],"names":["gql","CREATEADDRESS","ACTIVEUSER","CREATEWORKSHOP","LOGIN","REGISTER","ADDALERT","GENERATETOKEN","UPDATEADDRESS","UPDATEPROFILL","UPDATEPASSWORD","UPDATEWORKSHOP","ADDSERVICE","UPDATESERVICE","UPDATESERVICEBYCODE","CREATEMODELE","UPDATEMODELE","DELETEMODELE","FORGETPASSWORD","CREATEMEASURE","UPDATEMEASURE","CREATEEMPLOYER","CUSTOMEREXIST","EMPLOYEREXIST","MATCHSERVICEEMPLOYER","UPDATEEMPLOYER"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,MAAMC,aAAa,GAAGD,GAAI;;;;;;;;CAA1B;AAUP,OAAO,MAAME,UAAU,GAAGF,GAAI;;;;;;CAAvB;AAQP,OAAO,MAAMG,cAAc,GAAGH,GAAI;;;;;;;CAA3B;AASP,OAAO,MAAMI,KAAK,GAAGJ,GAAI;;;;;;CAAlB;AAQP,OAAO,MAAMK,QAAQ,GAAGL,GAAI;;;;;;CAArB;AAQP,OAAO,MAAMM,QAAQ,GAAGN,GAAI;;;;;;;CAArB;AASP,OAAO,MAAMO,aAAa,GAAGP,GAAI;;;;;;CAA1B;AAQP,OAAO,MAAMQ,aAAa,GAAGR,GAAI;;;;;;;;CAA1B;AASP,OAAO,MAAMS,aAAa,GAAGT,GAAI;;;;;;;;;;;CAA1B;AAaP,OAAO,MAAMU,cAAc,GAAGV,GAAI;;;;;;CAA3B;AAQP,OAAO,MAAMW,cAAc,GAAGX,GAAI;;;;;;CAA3B;AAQP,OAAO,MAAMY,UAAU,GAAGZ,GAAI;;;;;;;CAAvB;AASP,OAAO,MAAMa,aAAa,GAAGb,GAAI;;;;;;;CAA1B;AASP,OAAO,MAAMc,mBAAmB,GAAGd,GAAI;;;;;;;CAAhC;AASP,OAAO,MAAMe,YAAY,GAAGf,GAAI;;;;;;;;;CAAzB;AAWP,OAAO,MAAMgB,YAAY,GAAGhB,GAAI;;;;;;;CAAzB;AASP,OAAO,MAAMiB,YAAY,GAAGjB,GAAI;;;;;;;CAAzB;AASP,OAAO,MAAMkB,cAAc,GAAGlB,GAAI;;;;;;;CAA3B;AASP,OAAO,MAAMmB,aAAa,GAAGnB,GAAI;;;;;;;;;;;;;;;;CAA1B;AAkBP,OAAO,MAAMoB,aAAa,GAAGpB,GAAI;;;;;;;;;;;;;;;;;;CAA1B;AAoBP,OAAO,MAAMqB,cAAc,GAAGrB,GAAI;;;;;;;CAA3B;AASP,OAAO,MAAMsB,aAAa,GAAGtB,GAAI;;;;;;;CAA1B;AASP,OAAO,MAAMuB,aAAa,GAAGvB,GAAI;;;;;;;CAA1B;AASP,OAAO,MAAMwB,oBAAoB,GAAGxB,GAAI;;;;;;;;;CAAjC;AAUP,OAAO,MAAMyB,cAAc,GAAGzB,GAAI;;;;;;;CAA3B","sourcesContent":["import gql from \"graphql-tag\";\n\nexport const CREATEADDRESS = gql`\n  mutation($address: AddressInput!) {\n    address: createAddress(input: { address: $address }) {\n      address {\n        id\n      }\n    }\n  }\n`;\n\nexport const ACTIVEUSER = gql`\n  mutation($id: UUID!) {\n    updateUser(input: { patch: { isActive: true }, id: $id }) {\n      clientMutationId\n    }\n  }\n`;\n\nexport const CREATEWORKSHOP = gql`\n  mutation($addWorkshop: AddWorkshopInput!) {\n    __typename\n    addWorkshop(input: $addWorkshop) {\n      clientMutationId\n    }\n  }\n`;\n\nexport const LOGIN = gql`\n  mutation($mail: String!, $password: String!) {\n    login(input: { password: $password, mail: $mail }) {\n      jwtToken\n    }\n  }\n`;\n\nexport const REGISTER = gql`\n  mutation($input: RegisterInput!) {\n    register(input: $input) {\n      jwtToken\n    }\n  }\n`;\n\nexport const ADDALERT = gql`\n  mutation($input: AddAlertInput!) {\n    __typename\n    addAlert(input: $input) {\n      clientMutationId\n    }\n  }\n`;\n\nexport const GENERATETOKEN = gql`\n  mutation($mail: String!) {\n    token: generateToken(input: { mail: $mail }) {\n      jwtToken\n    }\n  }\n`;\n\nexport const UPDATEADDRESS = gql`\n  mutation($id: UUID!, $patch: AddressPatch!) {\n    updateAddress(input: { patch: $patch, id: $id }) {\n      address {\n        id\n      }\n    }\n  }\n`;\nexport const UPDATEPROFILL = gql`\n  mutation($id: UUID!, $phone: String, $firstName: String, $lastName: String) {\n    updateUser(\n      input: {\n        patch: { phone: $phone, lastName: $lastName, firstName: $firstName }\n        id: $id\n      }\n    ) {\n      clientMutationId\n    }\n  }\n`;\n\nexport const UPDATEPASSWORD = gql`\n  mutation($id: UUID!, $password: String!) {\n    updateUser(input: { patch: { password: $password }, id: $id }) {\n      clientMutationId\n    }\n  }\n`;\n\nexport const UPDATEWORKSHOP = gql`\n  mutation($id: UUID!, $patch: WorkshopPatch!) {\n    updateWorkshop(input: { patch: $patch, id: $id }) {\n      clientMutationId\n    }\n  }\n`;\n\nexport const ADDSERVICE = gql`\n  mutation($input: AddServiceInput!) {\n    __typename\n    addService(input: $input) {\n      code: integer\n    }\n  }\n`;\n\nexport const UPDATESERVICE = gql`\n  mutation($id: UUID!, $patch: ServicePatch!) {\n    __typename\n    updateService(input: { patch: $patch, id: $id }) {\n      clientMutationId\n    }\n  }\n`;\n\nexport const UPDATESERVICEBYCODE = gql`\n  mutation($code: Int!, $patch: ServicePatch!) {\n    __typename\n    updateServiceByCode(input: { patch: $patch, code: $code }) {\n      clientMutationId\n    }\n  }\n`;\n\nexport const CREATEMODELE = gql`\n  mutation($modele: ModeleInput!) {\n    __typename\n    createModele(input: { modele: $modele }) {\n      modele {\n        id\n      }\n    }\n  }\n`;\n\nexport const UPDATEMODELE = gql`\n  mutation($id: UUID!, $patch: ModelePatch!) {\n    __typename\n    updateModele(input: { patch: $patch, id: $id }) {\n      clientMutationId\n    }\n  }\n`;\n\nexport const DELETEMODELE = gql`\n  mutation($id: UUID!) {\n    __typename\n    deleteModele(input: { id: $id }) {\n      clientMutationId\n    }\n  }\n`;\n\nexport const FORGETPASSWORD = gql`\n  mutation($mail: String!) {\n    __typename\n    token: forgetPassword(input: { mail: $mail }) {\n      jwtToken\n    }\n  }\n`;\n\nexport const CREATEMEASURE = gql`\n  mutation($measure: MeasureInput!) {\n    __typename\n    createMeasure(input: { measure: $measure }) {\n      measure {\n        id\n        breasts\n        hips\n        length\n        longSleeve\n        lowsLeeve\n        pants\n        width\n      }\n    }\n  }\n`;\n\nexport const UPDATEMEASURE = gql`\n  mutation($id: UUID!, $patch: MeasurePatch!) {\n    updateMeasure(input: { patch: $patch, id: $id }) {\n      measure {\n        id\n        breasts\n        createdAt\n        hips\n        length\n        longSleeve\n        lowsLeeve\n        updateAt\n        width\n        belt\n        pants\n      }\n    }\n  }\n`;\n\nexport const CREATEEMPLOYER = gql`\n  mutation($input: AddEmployerInput!) {\n    __typename\n    addEmployer(input: $input) {\n      code: integer\n    }\n  }\n`;\n\nexport const CUSTOMEREXIST = gql`\n  mutation($phone: String!, $mail: String) {\n    __typename\n    customerExist(input: { phone: $phone, mail: $mail }) {\n      exist: boolean\n    }\n  }\n`;\n\nexport const EMPLOYEREXIST = gql`\n  mutation($phone: String!, $mail: String) {\n    __typename\n    employerExist(input: { phone: $phone, mail: $mail }) {\n      exist: boolean\n    }\n  }\n`;\n\nexport const MATCHSERVICEEMPLOYER = gql`\n  mutation($codeService: Int!, $codeEmployer: Int!) {\n    __typename\n    matchServiceEmployer(\n      input: { codeService: $codeService, codeEmployer: $codeEmployer }\n    ) {\n      match: boolean\n    }\n  }\n`;\nexport const UPDATEEMPLOYER = gql`\n  mutation($id: UUID!, $patch: ModelePatch!) {\n    __typename\n    updateEmployer(input: { patch: $patch, id: $id }) {\n      clientMutationId\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}