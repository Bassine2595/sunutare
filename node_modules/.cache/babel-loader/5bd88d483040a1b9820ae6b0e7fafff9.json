{"ast":null,"code":"import \"antd/es/row/style\";\nimport _Row from \"antd/es/row\";\nimport \"antd/es/col/style\";\nimport _Col from \"antd/es/col\";\nimport \"antd/es/list/style\";\nimport _List from \"antd/es/list\";\nimport \"antd/es/card/style\";\nimport _Card from \"antd/es/card\";\nvar _jsxFileName = \"/home/bassine/Documents/ProjetSunutare/frontend-manager/src/component/User/Service/Index.tsx\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { UserContext } from \"../../Context\";\nimport { SERVICES } from \"../../../Gql/Query\";\nimport { Theme } from \"../../Shared/ManagerLayout\";\nimport { Service } from \"./Display\";\nimport { FilterForm } from \"./Form\";\nimport { omit } from \"lodash\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { refetchableToggle } from \"../../../reducers/service/Reducer\";\nexport const Index = () => {\n  const {\n    user\n  } = useContext(UserContext);\n  const init = {\n    workshopId: user.workshop.id,\n    isStarded: undefined,\n    isCut: undefined,\n    isOver: undefined,\n    isDelivered: undefined\n  };\n  const {\n    data,\n    loading,\n    refetch\n  } = useQuery(SERVICES, {\n    variables: init\n  });\n  const {\n    refetchable\n  } = useSelector(({\n    serviceModal\n  }) => serviceModal);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (refetchable) {\n      refetch();\n      dispatch(refetchableToggle());\n    }\n  }, [refetch, dispatch, refetchable]);\n\n  const onChange = ({\n    target: {\n      value\n    }\n  }) => {\n    switch (value) {\n      case \"start\":\n        refetch({ ...omit(init, \"isStarded\"),\n          isStarded: true\n        });\n        break;\n\n      case \"cut\":\n        refetch({ ...omit(init, \"isCut\"),\n          isCut: true\n        });\n        break;\n\n      case \"over\":\n        refetch({ ...omit(init, \"isOver\"),\n          isOver: true\n        });\n        break;\n\n      case \"deliver\":\n        refetch({ ...omit(init, \"isDelivered\"),\n          isDelivered: true\n        });\n        break;\n\n      default:\n        refetch(init);\n        break;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Theme, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(_Card, {\n    style: {\n      marginBottom: 20\n    },\n    title: \"Filtrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FilterForm, {\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(_Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(_Col, {\n    span: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, data && /*#__PURE__*/React.createElement(_List, {\n    grid: {\n      gutter: 16,\n      xs: 1,\n      sm: 2,\n      md: 2,\n      lg: 4\n    },\n    rowKey: \"id\",\n    loading: loading,\n    renderItem: data => /*#__PURE__*/React.createElement(_List.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Service, {\n      service: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 19\n      }\n    })),\n    dataSource: data.services.nodes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }))));\n};","map":{"version":3,"sources":["/home/bassine/Documents/ProjetSunutare/frontend-manager/src/component/User/Service/Index.tsx"],"names":["React","useContext","useEffect","useQuery","UserContext","SERVICES","Theme","Service","FilterForm","omit","useSelector","useDispatch","refetchableToggle","Index","user","init","workshopId","workshop","id","isStarded","undefined","isCut","isOver","isDelivered","data","loading","refetch","variables","refetchable","serviceModal","dispatch","onChange","target","value","marginBottom","gutter","xs","sm","md","lg","services","nodes"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport { Row, Col, Card, List } from \"antd\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { UserContext } from \"../../Context\";\nimport { SERVICES } from \"../../../Gql/Query\";\nimport { Theme } from \"../../Shared/ManagerLayout\";\nimport { Service } from \"./Display\";\nimport { FilterForm } from \"./Form\";\nimport { omit } from \"lodash\";\nimport { ServiceModele } from \"../../../modeles/Service\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ReducerType } from \"../../../reducers/Reducer\";\nimport { refetchableToggle } from \"../../../reducers/service/Reducer\";\n\nexport const Index = () => {\n  const { user } = useContext(UserContext);\n  const init = {\n    workshopId: user.workshop.id,\n    isStarded: undefined,\n    isCut: undefined,\n    isOver: undefined,\n    isDelivered: undefined,\n  };\n  const { data, loading, refetch } = useQuery(SERVICES, {\n    variables: init,\n  });\n  const { refetchable } = useSelector(\n    ({ serviceModal }: ReducerType) => serviceModal\n  );\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (refetchable) {\n      refetch();\n      dispatch(refetchableToggle());\n    }\n  }, [refetch, dispatch, refetchable]);\n\n  const onChange = ({ target: { value } }) => {\n    switch (value) {\n      case \"start\":\n        refetch({ ...omit(init, \"isStarded\"), isStarded: true });\n        break;\n      case \"cut\":\n        refetch({ ...omit(init, \"isCut\"), isCut: true });\n        break;\n      case \"over\":\n        refetch({ ...omit(init, \"isOver\"), isOver: true });\n        break;\n      case \"deliver\":\n        refetch({ ...omit(init, \"isDelivered\"), isDelivered: true });\n        break;\n      default:\n        refetch(init);\n        break;\n    }\n  };\n\n  return (\n    <Theme>\n      <Card style={{ marginBottom: 20 }} title=\"Filtrer\">\n        <FilterForm onChange={onChange} />\n      </Card>\n      <Row>\n        <Col span={24}>\n          {data && (\n            <List\n              grid={{ gutter: 16, xs: 1, sm: 2, md: 2, lg: 4 }}\n              rowKey=\"id\"\n              loading={loading}\n              renderItem={(data: ServiceModele) => (\n                <List.Item>\n                  <Service service={data} />\n                </List.Item>\n              )}\n              dataSource={data.services.nodes}\n            />\n          )}\n        </Col>\n      </Row>\n    </Theme>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}