{"ast":null,"code":"import \"antd/es/modal/style\";\nimport _Modal from \"antd/es/modal\";\nimport \"antd/es/notification/style\";\nimport _notification from \"antd/es/notification\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nvar _jsxFileName = \"/home/bassine/Documents/ProjetSunutare/frontend-manager/src/component/Shared/Modal/Edit.tsx\";\nimport React from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { UPDATESERVICE } from \"../../../Gql/Mutation\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { editModalToggle, refetchableToggle } from \"../../../reducers/service/Reducer\";\nimport { FormItemDateBegin, FormItemDateFinish, FormItemComment } from \"../Input\";\nimport { ButtonEdit, ButtonCancel } from \"../Button\";\nimport moment from \"moment\";\n\nconst EditForm = ({\n  form,\n  initialValues: {\n    dateBegin,\n    dateFinish\n  }\n}) => {\n  return /*#__PURE__*/React.createElement(_Form, {\n    form: form,\n    name: \"edit\",\n    initialValues: {\n      dateBegin: moment(dateBegin),\n      dateFinish: moment(dateFinish)\n    },\n    layout: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormItemDateBegin, {\n    label: \"Date de d\\xE9marrage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormItemDateFinish, {\n    label: \"Date de livraison\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormItemComment, {\n    label: \"Commentaire\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport const EditModal = () => {\n  const dispatch = useDispatch();\n  const {\n    editModal,\n    service\n  } = useSelector(({\n    serviceModal\n  }) => serviceModal);\n  const [editService, {\n    loading\n  }] = useMutation(UPDATESERVICE);\n\n  const [form] = _Form.useForm();\n\n  const onFinish = () => {\n    form.validateFields().then(values => {\n      console.log(values);\n      editService({\n        variables: {\n          id: service === null || service === void 0 ? void 0 : service.id,\n          patch: { ...values\n          }\n        }\n      }).then(() => {\n        _notification.success({\n          message: \"Service modifié avec succès !\"\n        });\n\n        dispatch(refetchableToggle());\n      }).catch(() => {\n        _notification.error({\n          message: \"Une erreur est survenue !\"\n        });\n      });\n      dispatch(editModalToggle());\n    }).catch(info => {\n      console.log(\"Validate Failed:\", info);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(_Modal, {\n    closable: false,\n    key: service === null || service === void 0 ? void 0 : service.id,\n    footer: [/*#__PURE__*/React.createElement(ButtonEdit, {\n      key: \"edit\",\n      loading: loading,\n      onClick: onFinish,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ButtonCancel, {\n      key: \"cancel\",\n      onClick: () => dispatch(editModalToggle()),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    })],\n    visible: editModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(EditForm, {\n    form: form,\n    initialValues: service,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/home/bassine/Documents/ProjetSunutare/frontend-manager/src/component/Shared/Modal/Edit.tsx"],"names":["React","useMutation","UPDATESERVICE","useSelector","useDispatch","editModalToggle","refetchableToggle","FormItemDateBegin","FormItemDateFinish","FormItemComment","ButtonEdit","ButtonCancel","moment","EditForm","form","initialValues","dateBegin","dateFinish","EditModal","dispatch","editModal","service","serviceModal","editService","loading","useForm","onFinish","validateFields","then","values","console","log","variables","id","patch","success","message","catch","error","info"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Modal, Form, notification } from \"antd\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { UPDATESERVICE } from \"../../../Gql/Mutation\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ReducerType } from \"../../../reducers/Reducer\";\nimport {\n  editModalToggle,\n  refetchableToggle,\n} from \"../../../reducers/service/Reducer\";\nimport {\n  FormItemDateBegin,\n  FormItemDateFinish,\n  FormItemComment,\n} from \"../Input\";\nimport { ButtonEdit, ButtonCancel } from \"../Button\";\nimport moment from \"moment\";\n\nconst EditForm = ({ form, initialValues: { dateBegin, dateFinish } }) => {\n  return (\n    <Form\n      form={form}\n      name=\"edit\"\n      initialValues={{\n        dateBegin: moment(dateBegin),\n        dateFinish: moment(dateFinish),\n      }}\n      layout=\"vertical\"\n    >\n      <FormItemDateBegin label=\"Date de démarrage\" />\n      <FormItemDateFinish label=\"Date de livraison\" />\n      <FormItemComment label=\"Commentaire\" />\n    </Form>\n  );\n};\nexport const EditModal = () => {\n  const dispatch = useDispatch();\n  const { editModal, service } = useSelector(\n    ({ serviceModal }: ReducerType) => serviceModal\n  );\n  const [editService, { loading }] = useMutation(UPDATESERVICE);\n  const [form] = Form.useForm();\n\n  const onFinish = () => {\n    form\n      .validateFields()\n      .then((values) => {\n        console.log(values);\n        editService({\n          variables: { id: service?.id, patch: { ...values } },\n        })\n          .then(() => {\n            notification.success({ message: \"Service modifié avec succès !\" });\n            dispatch(refetchableToggle());\n          })\n          .catch(() => {\n            notification.error({ message: \"Une erreur est survenue !\" });\n          });\n        dispatch(editModalToggle());\n      })\n      .catch((info) => {\n        console.log(\"Validate Failed:\", info);\n      });\n  };\n\n  return (\n    <Modal\n      closable={false}\n      key={service?.id}\n      footer={[\n        <ButtonEdit key=\"edit\" loading={loading} onClick={onFinish} />,\n        <ButtonCancel\n          key=\"cancel\"\n          onClick={() => dispatch(editModalToggle())}\n        />,\n      ]}\n      visible={editModal}\n    >\n      <EditForm form={form} initialValues={service} />\n    </Modal>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}