{"ast":null,"code":"import \"antd/es/row/style\";\nimport _Row from \"antd/es/row\";\nimport \"antd/es/col/style\";\nimport _Col from \"antd/es/col\";\nimport \"antd/es/list/style\";\nimport _List from \"antd/es/list\";\nvar _jsxFileName = \"/home/bassine/Documents/ProjetSunutare/frontend-manager/src/component/User/Customer/Customer.tsx\";\nimport React, { useContext } from \"react\";\nimport { Theme } from \"../../Shared/Layout\";\nimport { UserContext } from \"../../Context\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { CUSTOMERSBYWORKSHOPID } from \"../../../Gql/Query\";\nimport { Display } from \"./Display\";\nexport const Customer = () => {\n  const {\n    user\n  } = useContext(UserContext);\n  const {\n    data,\n    loading,\n    refetch\n  } = useQuery(CUSTOMERSBYWORKSHOPID, {\n    variables: {\n      workshopId: user.workshop.id,\n      all: true\n    }\n  });\n  if (data) console.log(data);\n  return /*#__PURE__*/React.createElement(Theme, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(_Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(_Col, {\n    span: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, data && /*#__PURE__*/React.createElement(_List, {\n    grid: {\n      gutter: 16,\n      xs: 1,\n      sm: 2,\n      md: 2,\n      lg: 4\n    },\n    rowKey: \"id\",\n    loading: loading,\n    renderItem: data => /*#__PURE__*/React.createElement(_List.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ServiceResume, Object.assign({}, data, {\n      onClickFollow: service => {\n        followModalToggle();\n        setService(service);\n      },\n      onClickShow: service => {\n        showModalToggle();\n        setService(service);\n      },\n      onClickBegin: service => {\n        beginModalToggle();\n        setService(service);\n      },\n      onClickEdit: service => {\n        editModalToggle();\n        setService(service);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 19\n      }\n    }))),\n    dataSource: data.services.nodes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(_List, {\n    rowKey: \"id\",\n    grid: {\n      gutter: 8,\n      xs: 1,\n      sm: 1,\n      md: 1,\n      lg: 2,\n      xl: 3\n    },\n    dataSource: data === null || data === void 0 ? void 0 : data.customers.nodes,\n    renderItem: (customer, key) => {\n      return /*#__PURE__*/React.createElement(_List.Item, {\n        key: key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Display, Object.assign({}, customer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }\n      })));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 8\n    }\n  }));\n};","map":{"version":3,"sources":["/home/bassine/Documents/ProjetSunutare/frontend-manager/src/component/User/Customer/Customer.tsx"],"names":["React","useContext","Theme","UserContext","useQuery","CUSTOMERSBYWORKSHOPID","Display","Customer","user","data","loading","refetch","variables","workshopId","workshop","id","all","console","log","gutter","xs","sm","md","lg","service","followModalToggle","setService","showModalToggle","beginModalToggle","editModalToggle","services","nodes","xl","customers","customer","key"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { Theme } from \"../../Shared/Layout\";\nimport { Row, Col, PageHeader, message, List, Button, Skeleton, Card } from \"antd\";\nimport { UserContext } from \"../../Context\";\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { CUSTOMERSBYWORKSHOPID } from \"../../../Gql/Query\";\nimport { Display } from \"./Display\";\nimport { FilterForm } from \"../Service/Form\";\n\n\nexport const Customer = () => {\n  const { user } = useContext(UserContext);\n  const { data, loading, refetch } = useQuery(CUSTOMERSBYWORKSHOPID, {\n    variables: { workshopId: user.workshop.id, all:true },\n  });\n \n  if(data)\n    console.log(data)\n  \n  return (\n    <Theme>\n         <Row>\n        <Col span={24}>\n          {data && (\n            <List\n              grid={{ gutter: 16, xs: 1, sm: 2, md: 2, lg: 4 }}\n              rowKey=\"id\"\n              loading={loading}\n              renderItem={(data) => (\n                <List.Item>\n                  <ServiceResume\n                    {...data}\n                    onClickFollow={(service) => {\n                      followModalToggle();\n                      setService(service);\n                    }}\n                    onClickShow={(service) => {\n                      showModalToggle();\n                      setService(service);\n                    }}\n                    onClickBegin={(service) => {\n                      beginModalToggle();\n                      setService(service);\n                    }}\n                    onClickEdit={(service) => {\n                      editModalToggle();\n                      setService(service);\n                    }}\n                  />\n                </List.Item>\n              )}\n              dataSource={data.services.nodes}\n            />\n          )}\n        </Col>\n      </Row>\n       <List\n              rowKey=\"id\"\n              grid={{ gutter: 8, xs: 1, sm: 1, md: 1, lg: 2, xl: 3 }}\n              dataSource={data?.customers.nodes}\n              renderItem={(customer:any, key) => {\n                return (\n                  <List.Item key={key}>\n                    <Display\n                        {...customer}\n                    />\n                  </List.Item>\n                );\n              }}\n            />\n    </Theme>\n  );\n};\n\n\n"]},"metadata":{},"sourceType":"module"}