{"ast":null,"code":"import { createHttpLink } from \"apollo-link-http\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { setContext } from \"apollo-link-context\";\n\nconst authLink = token => setContext((_, {\n  headers\n}) => {\n  return {\n    headers: { ...headers,\n      authorization: token && `Bearer ${token}`\n    }\n  };\n});\n\nconst httpLink = createHttpLink({\n  uri: process.env.REACT_APP_HTTP_LINK_GRAPHQL\n});\n\nconst link = token => token ? authLink(token).concat(httpLink) : httpLink;\n\nconst cache = new InMemoryCache();\n\nconst Client = ({\n  token\n}) => {\n  return new ApolloClient({\n    link: link(token),\n    cache: cache\n  });\n};\n\nexport default Client;","map":{"version":3,"sources":["/home/bassine/Documents/ProjetSunutare/frontend-manager/src/Client.tsx"],"names":["createHttpLink","ApolloClient","InMemoryCache","setContext","authLink","token","_","headers","authorization","httpLink","uri","process","env","REACT_APP_HTTP_LINK_GRAPHQL","link","concat","cache","Client"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IACfF,UAAU,CAAC,CAACG,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAyB;AAClC,SAAO;AACLA,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPC,MAAAA,aAAa,EAAEH,KAAK,IAAK,UAASA,KAAM;AAFjC;AADJ,GAAP;AAMD,CAPS,CADZ;;AAUA,MAAMI,QAAQ,GAAGT,cAAc,CAAC;AAC9BU,EAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADa,CAAD,CAA/B;;AAIA,MAAMC,IAAI,GAAIT,KAAD,IAAYA,KAAK,GAAGD,QAAQ,CAACC,KAAD,CAAR,CAAgBU,MAAhB,CAAuBN,QAAvB,CAAH,GAAsCA,QAApE;;AAEA,MAAMO,KAAK,GAAG,IAAId,aAAJ,EAAd;;AAEA,MAAMe,MAAM,GAAG,CAAC;AAAEZ,EAAAA;AAAF,CAAD,KAAe;AAC5B,SAAO,IAAIJ,YAAJ,CAAiB;AACtBa,IAAAA,IAAI,EAAEA,IAAI,CAACT,KAAD,CADY;AAGtBW,IAAAA,KAAK,EAAEA;AAHe,GAAjB,CAAP;AAKD,CAND;;AAQA,eAAeC,MAAf","sourcesContent":["import { createHttpLink } from \"apollo-link-http\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { setContext } from \"apollo-link-context\";\n\nconst authLink = (token) =>\n  setContext((_, { headers }: any) => {\n    return {\n      headers: {\n        ...headers,\n        authorization: token && `Bearer ${token}`,\n      },\n    };\n  });\n\nconst httpLink = createHttpLink({\n  uri: process.env.REACT_APP_HTTP_LINK_GRAPHQL,\n});\n\nconst link = (token) => (token ? authLink(token).concat(httpLink) : httpLink);\n\nconst cache = new InMemoryCache();\n\nconst Client = ({ token }) => {\n  return new ApolloClient({\n    link: link(token),\n\n    cache: cache,\n  });\n};\n\nexport default Client;\n"]},"metadata":{},"sourceType":"module"}