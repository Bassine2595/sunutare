{"ast":null,"code":"import \"antd/es/modal/style\";\nimport _Modal from \"antd/es/modal\";\nimport \"antd/es/list/style\";\nimport _List from \"antd/es/list\";\nimport \"antd/es/card/style\";\nimport _Card from \"antd/es/card\";\nimport \"antd/es/carousel/style\";\nimport _Carousel from \"antd/es/carousel\";\nimport \"antd/es/divider/style\";\nimport _Divider from \"antd/es/divider\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nvar _jsxFileName = \"/home/bassine/Documents/ProjetSunutare/frontend-manager/src/component/User/Service/ChoiceModele.tsx\";\nimport React, { useContext } from \"react\";\nimport { UserContext } from \"../../Context\";\nimport { MODELES } from \"../../../Gql/Query\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport { FormFilter, AddModeleForm } from \"../Modele/Form\";\nimport { CREATEMODELE } from \"../../../Gql/Mutation\";\nimport { useModal } from \"../../../hooks/useModal\";\nimport { useMediaQuery } from \"react-responsive\";\nexport const ChoiceModele = ({\n  onChoice\n}) => {\n  const {\n    user\n  } = useContext(UserContext);\n  const [visible, toggle] = useModal();\n  const {\n    data,\n    loading,\n    refetch\n  } = useQuery(MODELES, {\n    variables: {\n      workshopId: user.workshop.id\n    }\n  });\n\n  const onFinish = values => {\n    refetch({ ...values\n    });\n  };\n\n  const isSm = useMediaQuery({\n    query: \"(max-width: 576px)\"\n  });\n  return /*#__PURE__*/React.createElement(_Card, {\n    bordered: false,\n    loading: loading,\n    bodyStyle: {\n      overflow: \"auto\",\n      height: 700\n    },\n    extra: /*#__PURE__*/React.createElement(_Button, {\n      type: \"primary\",\n      icon: /*#__PURE__*/React.createElement(UploadOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }\n      }),\n      onClick: () => {\n        toggle();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, \"Autre mod\\xE8le\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ChoiceOtherModel, {\n    visible: visible,\n    onCancel: toggle,\n    onSuccess: ({\n      modele\n    }) => {\n      onChoice(modele);\n      toggle();\n    },\n    onError: () => {\n      toggle();\n\n      _message.error(\"Une erreur est survenue !\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }), !isSm && /*#__PURE__*/React.createElement(FormFilter, {\n    onFinish: onFinish,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(_Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), !loading && /*#__PURE__*/React.createElement(_List, {\n    grid: {\n      gutter: 12,\n      xs: 1,\n      sm: 2,\n      md: 2,\n      lg: 4\n    },\n    rowKey: \"id\",\n    dataSource: data === null || data === void 0 ? void 0 : data.modeles.nodes,\n    renderItem: item => /*#__PURE__*/React.createElement(_List.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(_Card, {\n      key: item.id,\n      cover: /*#__PURE__*/React.createElement(_Carousel, {\n        autoplay: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 19\n        }\n      }, item.imageFile.map(({\n        name,\n        url\n      }, key) => /*#__PURE__*/React.createElement(\"img\", {\n        key: key,\n        height: 300,\n        alt: name,\n        src: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 23\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(_Button, {\n      block: true,\n      key: \"choice\",\n      type: \"primary\",\n      onClick: () => onChoice(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, \"Choisir\"))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst ChoiceOtherModel = ({\n  visible,\n  onCancel,\n  onSuccess,\n  onError\n}) => {\n  const [createModele, {\n    loading\n  }] = useMutation(CREATEMODELE);\n\n  const onFinish = ({\n    action,\n    ...rest\n  }) => {\n    createModele({\n      variables: {\n        modele: { ...rest\n        }\n      }\n    }).then(({\n      data: {\n        createModele\n      }\n    }) => {\n      onSuccess(createModele);\n    }).catch(error => {\n      onError(error);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(_Modal, {\n    visible: visible,\n    onCancel: onCancel,\n    footer: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AddModeleForm, {\n    onFinish: onFinish,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/home/bassine/Documents/ProjetSunutare/frontend-manager/src/component/User/Service/ChoiceModele.tsx"],"names":["React","useContext","UserContext","MODELES","useQuery","useMutation","UploadOutlined","FormFilter","AddModeleForm","CREATEMODELE","useModal","useMediaQuery","ChoiceModele","onChoice","user","visible","toggle","data","loading","refetch","variables","workshopId","workshop","id","onFinish","values","isSm","query","overflow","height","modele","error","gutter","xs","sm","md","lg","modeles","nodes","item","imageFile","map","name","url","key","ChoiceOtherModel","onCancel","onSuccess","onError","createModele","action","rest","then","catch"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { UserContext } from \"../../Context\";\nimport { MODELES } from \"../../../Gql/Query\";\nimport { Card, Button, Modal, Carousel, Divider, message, List } from \"antd\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport { FormFilter, AddModeleForm } from \"../Modele/Form\";\nimport { CREATEMODELE } from \"../../../Gql/Mutation\";\nimport { useModal } from \"../../../hooks/useModal\";\nimport { useMediaQuery } from \"react-responsive\";\n\nexport const ChoiceModele = ({ onChoice }) => {\n  const { user } = useContext(UserContext);\n  const [visible, toggle] = useModal();\n  const { data, loading, refetch } = useQuery(MODELES, {\n    variables: { workshopId: user.workshop.id },\n  });\n\n  const onFinish = (values) => {\n    refetch({ ...values });\n  };\n  const isSm = useMediaQuery({ query: \"(max-width: 576px)\" });\n\n  return (\n    <Card\n      bordered={false}\n      loading={loading}\n      bodyStyle={{\n        overflow: \"auto\",\n        height: 700,\n      }}\n      extra={\n        <Button\n          type=\"primary\"\n          icon={<UploadOutlined />}\n          onClick={() => {\n            toggle();\n          }}\n        >\n          Autre modèle\n        </Button>\n      }\n    >\n      <ChoiceOtherModel\n        visible={visible}\n        onCancel={toggle}\n        onSuccess={({ modele }) => {\n          onChoice(modele);\n          toggle();\n        }}\n        onError={() => {\n          toggle();\n          message.error(\"Une erreur est survenue !\");\n        }}\n      />\n      {!isSm && <FormFilter onFinish={onFinish} />}\n      <Divider />\n      {!loading && (\n        <List\n          grid={{ gutter: 12, xs: 1, sm: 2, md: 2, lg: 4 }}\n          rowKey=\"id\"\n          dataSource={data?.modeles.nodes}\n          renderItem={(item: any) => (\n            <List.Item>\n              <Card\n                key={item.id}\n                cover={\n                  <Carousel autoplay>\n                    {item.imageFile.map(({ name, url }, key) => (\n                      <img key={key} height={300} alt={name} src={url} />\n                    ))}\n                  </Carousel>\n                }\n              >\n                <Button\n                  block\n                  key=\"choice\"\n                  type=\"primary\"\n                  onClick={() => onChoice(item)}\n                >\n                  Choisir\n                </Button>\n              </Card>\n            </List.Item>\n          )}\n        />\n      )}\n    </Card>\n  );\n};\n\nconst ChoiceOtherModel = ({ visible, onCancel, onSuccess, onError }) => {\n  const [createModele, { loading }] = useMutation(CREATEMODELE);\n\n  const onFinish = ({ action, ...rest }) => {\n    createModele({\n      variables: { modele: { ...rest } },\n    })\n      .then(({ data: { createModele } }) => {\n        onSuccess(createModele);\n      })\n      .catch((error) => {\n        onError(error);\n      });\n  };\n  return (\n    <Modal visible={visible} onCancel={onCancel} footer={null}>\n      <AddModeleForm onFinish={onFinish} loading={loading} />\n    </Modal>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}