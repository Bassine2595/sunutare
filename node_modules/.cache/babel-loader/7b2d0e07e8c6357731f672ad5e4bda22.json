{"ast":null,"code":"import \"antd/es/empty/style\";\nimport _Empty from \"antd/es/empty\";\nimport \"antd/es/card/style\";\nimport _Card from \"antd/es/card\";\nimport \"antd/es/row/style\";\nimport _Row from \"antd/es/row\";\nimport \"antd/es/col/style\";\nimport _Col from \"antd/es/col\";\nimport \"antd/es/notification/style\";\nimport _notification from \"antd/es/notification\";\nvar _jsxFileName = \"/home/bassine/Documents/ProjetSunutare/frontend-manager/src/component/User/Service/ServiceByDate.tsx\";\nimport React, { useContext, useState } from \"react\";\nimport { SERVICEBYDATE } from \"../../../Gql/Query\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { UserContext } from \"../../Context\";\nimport { ServiceResume } from \"./Display\";\nimport { Show } from \"./Show\";\nimport { Edit } from \"./Edit\";\nimport { useModal } from \"../../../hooks/useModal\";\nimport { Begin } from \"../Begin/Begin\";\nimport { Index as FollowModal } from \"../Follow/Follow\";\nimport { isEmpty } from \"lodash\";\nexport const Index = ({\n  label,\n  value,\n  title\n}) => {\n  const {\n    user\n  } = useContext(UserContext);\n  const [service, setService] = useState(null);\n  const [beginModal, beginModalToggle] = useModal();\n  const [showModal, showModalToggle] = useModal();\n  const [editModal, editModalToggle] = useModal();\n  const [followModal, followModalToggle] = useModal();\n  const variables = label === \"dateFinish\" ? {\n    dateFinish: value,\n    workshopId: user.workshop.id\n  } : {\n    dateBegin: value,\n    workshopId: user.workshop.id,\n    isStarded: false\n  };\n  const {\n    data,\n    loading,\n    refetch\n  } = useQuery(SERVICEBYDATE, {\n    variables\n  });\n  return !isEmpty(data === null || data === void 0 ? void 0 : data.services.nodes) ? /*#__PURE__*/React.createElement(_Card, {\n    loading: loading,\n    title: title,\n    bodyStyle: {\n      overflow: \"auto\",\n      height: 500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Begin, {\n    service: service,\n    visible: beginModal,\n    onSuccess: () => {\n      beginModalToggle();\n\n      _notification.success({\n        message: \"Service commencé avec succès!\"\n      });\n\n      refetch();\n    },\n    onError: () => {\n      _notification.error({\n        message: \"Une erreur est survenue réessayer plus tard !\"\n      });\n\n      beginModalToggle();\n    },\n    onCancel: beginModalToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Show, {\n    visible: showModal,\n    onCancel: showModalToggle,\n    serviceId: service === null || service === void 0 ? void 0 : service.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Edit, {\n    visible: editModal,\n    onCancel: editModalToggle,\n    service: service,\n    onSuccess: () => {\n      editModalToggle();\n\n      _notification.success({\n        message: \"Service modifié avec succès !\"\n      });\n\n      refetch();\n    },\n    onError: () => {\n      _notification.error({\n        message: \"Une erreur est survenue réessayer plus tard !\"\n      });\n\n      editModalToggle();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FollowModal, {\n    onError: () => {\n      followModalToggle();\n\n      _notification.error({\n        message: \"Une erreur survenue réessayer plus tard !\"\n      });\n    },\n    visible: followModal,\n    onCancel: followModalToggle,\n    onSuccess: () => {\n      followModalToggle();\n\n      _notification.success({\n        message: \"Etape validée avec succès!\"\n      });\n\n      refetch();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(_Row, {\n    gutter: [8, 8],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, data && data.services.nodes.map((data, key) => /*#__PURE__*/React.createElement(_Col, {\n    key: key,\n    xs: 24,\n    sm: 24,\n    md: 12,\n    lg: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ServiceResume, Object.assign({}, data, {\n    onClickFollow: service => {\n      followModalToggle();\n      setService(service);\n    },\n    onClickShow: service => {\n      showModalToggle();\n      setService(service);\n    },\n    onClickBegin: service => {\n      beginModalToggle();\n      setService(service);\n    },\n    onClickEdit: service => {\n      editModalToggle();\n      setService(service);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  })))))) : /*#__PURE__*/React.createElement(_Card, {\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(_Empty, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/home/bassine/Documents/ProjetSunutare/frontend-manager/src/component/User/Service/ServiceByDate.tsx"],"names":["React","useContext","useState","SERVICEBYDATE","useQuery","UserContext","ServiceResume","Show","Edit","useModal","Begin","Index","FollowModal","isEmpty","label","value","title","user","service","setService","beginModal","beginModalToggle","showModal","showModalToggle","editModal","editModalToggle","followModal","followModalToggle","variables","dateFinish","workshopId","workshop","id","dateBegin","isStarded","data","loading","refetch","services","nodes","overflow","height","success","message","error","map","key"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { Card, Row, Col, Empty, notification } from \"antd\";\nimport { SERVICEBYDATE } from \"../../../Gql/Query\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { UserContext } from \"../../Context\";\nimport { ServiceResume } from \"./Display\";\nimport { Show } from \"./Show\";\nimport { Edit } from \"./Edit\";\nimport { useModal } from \"../../../hooks/useModal\";\nimport { Begin } from \"../Begin/Begin\";\nimport { ServiceByDateProps } from \"./Type\";\nimport { Index as FollowModal } from \"../Follow/Follow\";\nimport { isEmpty } from \"lodash\";\n\nexport const Index = ({ label, value, title }: ServiceByDateProps) => {\n  const { user } = useContext(UserContext);\n  const [service, setService] = useState(null);\n  const [beginModal, beginModalToggle] = useModal();\n  const [showModal, showModalToggle] = useModal();\n  const [editModal, editModalToggle] = useModal();\n  const [followModal, followModalToggle] = useModal();\n  const variables =\n    label === \"dateFinish\"\n      ? { dateFinish: value, workshopId: user.workshop.id }\n      : { dateBegin: value, workshopId: user.workshop.id, isStarded: false };\n  const { data, loading, refetch } = useQuery(SERVICEBYDATE, {\n    variables,\n  });\n\n  return !isEmpty(data?.services.nodes) ? (\n    <Card\n      loading={loading}\n      title={title}\n      bodyStyle={{\n        overflow: \"auto\",\n        height: 500,\n      }}\n    >\n      <Begin\n        service={service}\n        visible={beginModal}\n        onSuccess={() => {\n          beginModalToggle();\n          notification.success({ message: \"Service commencé avec succès!\" });\n          refetch();\n        }}\n        onError={() => {\n          notification.error({\n            message: \"Une erreur est survenue réessayer plus tard !\",\n          });\n          beginModalToggle();\n        }}\n        onCancel={beginModalToggle}\n      />\n      <Show\n        visible={showModal}\n        onCancel={showModalToggle}\n        serviceId={service?.id}\n      />\n      <Edit\n        visible={editModal}\n        onCancel={editModalToggle}\n        service={service}\n        onSuccess={() => {\n          editModalToggle();\n          notification.success({ message: \"Service modifié avec succès !\" });\n          refetch();\n        }}\n        onError={() => {\n          notification.error({\n            message: \"Une erreur est survenue réessayer plus tard !\",\n          });\n          editModalToggle();\n        }}\n      />\n      <FollowModal\n        onError={() => {\n          followModalToggle();\n          notification.error({\n            message: \"Une erreur survenue réessayer plus tard !\",\n          });\n        }}\n        visible={followModal}\n        onCancel={followModalToggle}\n        onSuccess={() => {\n          followModalToggle();\n          notification.success({ message: \"Etape validée avec succès!\" });\n          refetch();\n        }}\n      />\n\n      <Row gutter={[8, 8]}>\n        {data &&\n          data.services.nodes.map((data, key) => (\n            <Col key={key} xs={24} sm={24} md={12} lg={8}>\n              <ServiceResume\n                {...data}\n                onClickFollow={(service) => {\n                  followModalToggle();\n                  setService(service);\n                }}\n                onClickShow={(service) => {\n                  showModalToggle();\n                  setService(service);\n                }}\n                onClickBegin={(service) => {\n                  beginModalToggle();\n                  setService(service);\n                }}\n                onClickEdit={(service) => {\n                  editModalToggle();\n                  setService(service);\n                }}\n              />\n            </Col>\n          ))}\n      </Row>\n    </Card>\n  ) : (\n    <Card title={title}>\n      <Empty />\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}