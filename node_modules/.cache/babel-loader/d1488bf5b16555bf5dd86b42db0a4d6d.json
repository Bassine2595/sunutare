{"ast":null,"code":"var _jsxFileName = \"/home/bassine/Documents/ProjetSunutare/frontend-manager/src/component/User/Profil/Update.tsx\";\nimport React, { useContext } from \"react\";\nimport { PasswordForm, ProfilForm } from \"./Form\";\nimport { UserContext } from \"../../Context\";\nimport { UPDATEPASSWORD, UPDATEPROFILL, CREATEADDRESS, UPDATEADDRESS } from \"../../../Gql/Mutation\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { AddressForm } from \"../Form\";\nexport const Password = ({\n  onSuccess,\n  onError\n}) => {\n  const {\n    user\n  } = useContext(UserContext);\n  const [updatePassword, {\n    loading\n  }] = useMutation(UPDATEPASSWORD);\n\n  const onFinish = values => {\n    updatePassword({\n      variables: {\n        id: user.id,\n        ...values\n      }\n    }).then(result => {\n      onSuccess(result);\n    }).catch(error => {\n      onError(error);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(PasswordForm, {\n    onFinish: onFinish,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 10\n    }\n  });\n};\nexport const Profil = ({\n  onSuccess,\n  onError\n}) => {\n  const {\n    user\n  } = useContext(UserContext);\n  const [updateUser, {\n    loading\n  }] = useMutation(UPDATEPROFILL);\n\n  const onFinish = values => {\n    updateUser({\n      variables: {\n        id: user.id,\n        ...values\n      }\n    }).then(result => {\n      onSuccess(result);\n    }).catch(error => {\n      onError(error);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ProfilForm, {\n    initialValues: user,\n    onFinish: onFinish,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  });\n};\nexport const Address = ({\n  onSuccess,\n  onError\n}) => {\n  const {\n    user\n  } = useContext(UserContext);\n  const [createAddress, optionsCreateAddress] = useMutation(CREATEADDRESS);\n  const [updateAddress, optionsUpdateAddress] = useMutation(UPDATEADDRESS);\n\n  const onFinish = ({\n    action,\n    ...values\n  }) => {\n    if (action === \"edit\") {\n      updateAddress({\n        variables: {\n          id: user.AddressForm.id,\n          patch: values\n        }\n      }).then(result => onSuccess(result)).catch(error => {\n        onError(error);\n      });\n    } else {\n      createAddress({\n        variables: {\n          address: {\n            of: \"USER\",\n            ...values\n          }\n        }\n      }).then(result => onSuccess(result)).catch(error => {\n        onError(error);\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(AddressForm, {\n    initialValues: user.address,\n    onFinish: onFinish,\n    loading: optionsCreateAddress.loading || optionsUpdateAddress.loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  });\n};","map":{"version":3,"sources":["/home/bassine/Documents/ProjetSunutare/frontend-manager/src/component/User/Profil/Update.tsx"],"names":["React","useContext","PasswordForm","ProfilForm","UserContext","UPDATEPASSWORD","UPDATEPROFILL","CREATEADDRESS","UPDATEADDRESS","useMutation","AddressForm","Password","onSuccess","onError","user","updatePassword","loading","onFinish","values","variables","id","then","result","catch","error","Profil","updateUser","Address","createAddress","optionsCreateAddress","updateAddress","optionsUpdateAddress","action","patch","address","of"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { PasswordForm, ProfilForm } from \"./Form\";\nimport { UserContext } from \"../../Context\";\nimport {\n  UPDATEPASSWORD,\n  UPDATEPROFILL,\n  CREATEADDRESS,\n  UPDATEADDRESS,\n} from \"../../../Gql/Mutation\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { AddressForm } from \"../Form\";\n\nexport const Password = ({ onSuccess, onError }) => {\n  const { user } = useContext(UserContext);\n  const [updatePassword, { loading }] = useMutation(UPDATEPASSWORD);\n\n  const onFinish = (values) => {\n    updatePassword({ variables: { id: user.id, ...values } })\n      .then((result) => {\n        onSuccess(result);\n      })\n      .catch((error) => {\n        onError(error);\n      });\n  };\n  return <PasswordForm onFinish={onFinish} loading={loading} />;\n};\n\nexport const Profil = ({ onSuccess, onError }) => {\n  const { user } = useContext(UserContext);\n  const [updateUser, { loading }] = useMutation(UPDATEPROFILL);\n\n  const onFinish = (values) => {\n    updateUser({ variables: { id: user.id, ...values } })\n      .then((result) => {\n        onSuccess(result);\n      })\n      .catch((error) => {\n        onError(error);\n      });\n  };\n\n  return (\n    <ProfilForm initialValues={user} onFinish={onFinish} loading={loading} />\n  );\n};\n\nexport const Address = ({ onSuccess, onError }) => {\n  const { user } = useContext(UserContext);\n  const [createAddress, optionsCreateAddress] = useMutation(CREATEADDRESS);\n  const [updateAddress, optionsUpdateAddress] = useMutation(UPDATEADDRESS);\n\n  const onFinish = ({ action, ...values }) => {\n    if (action === \"edit\") {\n      updateAddress({\n        variables: { id: user.AddressForm.id, patch: values },\n      })\n        .then((result) => onSuccess(result))\n        .catch((error) => {\n          onError(error);\n        });\n    } else {\n      createAddress({ variables: { address: { of: \"USER\", ...values } } })\n        .then((result) => onSuccess(result))\n        .catch((error) => {\n          onError(error);\n        });\n    }\n  };\n\n  return (\n    <AddressForm\n      initialValues={user.address}\n      onFinish={onFinish}\n      loading={optionsCreateAddress.loading || optionsUpdateAddress.loading}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}