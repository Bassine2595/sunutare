{"ast":null,"code":"import \"antd/es/modal/style\";\nimport _Modal from \"antd/es/modal\";\nimport \"antd/es/notification/style\";\nimport _notification from \"antd/es/notification\";\nimport \"antd/es/config-provider/style\";\nimport _ConfigProvider from \"antd/es/config-provider\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nvar _jsxFileName = \"/home/bassine/Documents/ProjetSunutare/frontend-manager/src/component/Shared/Modal/Deliver.tsx\";\nimport React from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { UPDATESERVICE } from \"../../../Gql/Mutation\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FormItemPaymentFinal } from \"../Input\";\nimport { ButtonCheck, ButtonCancel } from \"../Button\";\nimport { validateMessages } from \"../../../Message\";\nimport { deliverModalToggle, refetchableToggle } from \"../../../reducers/service/Reducer\";\nimport { ServicePriceDescription } from \"../Description/Service\";\n\nconst DeliverForm = ({\n  form\n}) => {\n  return /*#__PURE__*/React.createElement(_ConfigProvider, {\n    form: {\n      validateMessages\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(_Form, {\n    name: \"deliver\",\n    form: form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormItemPaymentFinal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport const DeliverModal = () => {\n  const [form] = _Form.useForm();\n\n  const dispatch = useDispatch();\n  const {\n    deliverModal,\n    service\n  } = useSelector(({\n    serviceModal\n  }) => serviceModal);\n  const [editService, {\n    loading\n  }] = useMutation(UPDATESERVICE);\n\n  const onFinish = () => {\n    form.validateFields().then(values => {\n      editService({\n        variables: {\n          patch: {\n            id: service === null || service === void 0 ? void 0 : service.id,\n            isDelivered: true,\n            ...values\n          }\n        }\n      }).then(({\n        data\n      }) => {\n        _notification.success({\n          message: \"Service livré avec succès\"\n        });\n\n        dispatch(refetchableToggle());\n      }).catch(() => {\n        _notification.error({\n          message: \"Une erreur est survenue!\"\n        });\n      });\n    }).catch(info => {\n      console.log(\"Validate Failed:\", info);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(_Modal, {\n    title: \"Livrer un service\",\n    visible: deliverModal,\n    footer: [/*#__PURE__*/React.createElement(ButtonCheck, {\n      key: \"check\",\n      loading: loading,\n      onClick: onFinish,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ButtonCancel, {\n      key: \"cancel\",\n      onClick: () => dispatch(deliverModalToggle()),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ServicePriceDescription, Object.assign({}, service, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(DeliverForm, {\n    form: form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/home/bassine/Documents/ProjetSunutare/frontend-manager/src/component/Shared/Modal/Deliver.tsx"],"names":["React","useMutation","UPDATESERVICE","useDispatch","useSelector","FormItemPaymentFinal","ButtonCheck","ButtonCancel","validateMessages","deliverModalToggle","refetchableToggle","ServicePriceDescription","DeliverForm","form","DeliverModal","useForm","dispatch","deliverModal","service","serviceModal","editService","loading","onFinish","validateFields","then","values","variables","patch","id","isDelivered","data","success","message","catch","error","info","console","log"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Modal, Form, ConfigProvider, notification } from \"antd\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { UPDATESERVICE } from \"../../../Gql/Mutation\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ReducerType } from \"../../../reducers/Reducer\";\nimport { FormItemPaymentFinal } from \"../Input\";\nimport { ButtonCheck, ButtonCancel } from \"../Button\";\nimport { validateMessages } from \"../../../Message\";\nimport {\n  deliverModalToggle,\n  refetchableToggle,\n} from \"../../../reducers/service/Reducer\";\nimport { ServicePriceDescription } from \"../Description/Service\";\n\nconst DeliverForm = ({ form }) => {\n  return (\n    <ConfigProvider form={{ validateMessages }}>\n      <Form name=\"deliver\" form={form}>\n        <FormItemPaymentFinal />\n      </Form>\n    </ConfigProvider>\n  );\n};\n\nexport const DeliverModal = () => {\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { deliverModal, service } = useSelector(\n    ({ serviceModal }: ReducerType) => serviceModal\n  );\n  const [editService, { loading }] = useMutation(UPDATESERVICE);\n\n  const onFinish = () => {\n    form\n      .validateFields()\n      .then((values) => {\n        editService({\n          variables: {\n            patch: { id: service?.id, isDelivered: true, ...values },\n          },\n        })\n          .then(({ data }) => {\n            notification.success({ message: \"Service livré avec succès\" });\n            dispatch(refetchableToggle());\n          })\n          .catch(() => {\n            notification.error({ message: \"Une erreur est survenue!\" });\n          });\n      })\n      .catch((info) => {\n        console.log(\"Validate Failed:\", info);\n      });\n  };\n\n  return (\n    <Modal\n      title=\"Livrer un service\"\n      visible={deliverModal}\n      footer={[\n        <ButtonCheck key=\"check\" loading={loading} onClick={onFinish} />,\n        <ButtonCancel\n          key=\"cancel\"\n          onClick={() => dispatch(deliverModalToggle())}\n        />,\n      ]}\n    >\n      <ServicePriceDescription {...service} />\n      <DeliverForm form={form} />\n    </Modal>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}